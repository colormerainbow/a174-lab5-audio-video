/*!
 * cleveland-clinic - v1.0.0
 * [object Object]
 * Copyright (c) 2022;
 * Licensed GPLv2+
 */!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([,,,,,,function(t,e,n){(function(e){var n=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,r=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof e&&e&&e.Object===Object&&e,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,d=Math.max,f=Math.min,p=function(){return c.Date.now()};function h(t,e,n){var i,o,r,a,s,l,c=0,u=!1,h=!1,y=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function v(e){var n=i,r=o;return i=o=void 0,c=e,a=t.apply(r,n)}function w(t){return c=t,s=setTimeout(x,e),u?v(t):a}function b(t){var n=t-l;return void 0===l||n>=e||n<0||h&&t-c>=r}function x(){var t=p();if(b(t))return k(t);s=setTimeout(x,function(t){var n=e-(t-l);return h?f(n,r-(t-c)):n}(t))}function k(t){return s=void 0,y&&i?v(t):(i=o=void 0,a)}function S(){var t=p(),n=b(t);if(i=arguments,o=this,l=t,n){if(void 0===s)return w(l);if(h)return s=setTimeout(x,e),v(l)}return void 0===s&&(s=setTimeout(x,e)),a}return e=g(e)||0,m(n)&&(u=!!n.leading,r=(h="maxWait"in n)?d(g(n.maxWait)||0,e):r,y="trailing"in n?!!n.trailing:y),S.cancel=function(){void 0!==s&&clearTimeout(s),c=0,i=l=o=s=void 0},S.flush=function(){return void 0===s?a:k(p())},S}function m(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function g(t){if("number"==typeof t)return t;if(function(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&"[object Symbol]"==u.call(t)}(t))return NaN;if(m(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=m(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(n,"");var s=o.test(t);return s||r.test(t)?a(t.slice(2),s?2:8):i.test(t)?NaN:+t}t.exports=function(t,e,n){var i=!0,o=!0;if("function"!=typeof t)throw new TypeError("Expected a function");return m(n)&&(i="leading"in n?!!n.leading:i,o="trailing"in n?!!n.trailing:o),h(t,e,{leading:i,maxWait:e,trailing:o})}}).call(this,n(7))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},,function(t,e,n){(function(e){var n=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,r=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof e&&e&&e.Object===Object&&e,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,d=Math.max,f=Math.min,p=function(){return c.Date.now()};function h(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function m(t){if("number"==typeof t)return t;if(function(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&"[object Symbol]"==u.call(t)}(t))return NaN;if(h(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=h(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(n,"");var s=o.test(t);return s||r.test(t)?a(t.slice(2),s?2:8):i.test(t)?NaN:+t}t.exports=function(t,e,n){var i,o,r,a,s,l,c=0,u=!1,g=!1,y=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function v(e){var n=i,r=o;return i=o=void 0,c=e,a=t.apply(r,n)}function w(t){return c=t,s=setTimeout(x,e),u?v(t):a}function b(t){var n=t-l;return void 0===l||n>=e||n<0||g&&t-c>=r}function x(){var t=p();if(b(t))return k(t);s=setTimeout(x,function(t){var n=e-(t-l);return g?f(n,r-(t-c)):n}(t))}function k(t){return s=void 0,y&&i?v(t):(i=o=void 0,a)}function S(){var t=p(),n=b(t);if(i=arguments,o=this,l=t,n){if(void 0===s)return w(l);if(g)return s=setTimeout(x,e),v(l)}return void 0===s&&(s=setTimeout(x,e)),a}return e=m(e)||0,h(n)&&(u=!!n.leading,r=(g="maxWait"in n)?d(m(n.maxWait)||0,e):r,y="trailing"in n?!!n.trailing:y),S.cancel=function(){void 0!==s&&clearTimeout(s),c=0,i=l=o=s=void 0},S.flush=function(){return void 0===s?a:k(p())},S}}).call(this,n(7))},function(t,e,n){n(11),n(30),t.exports=n(15)},function(t,e){jQuery((function(t){t('[role="menubar"]').on("focus.aria  mouseenter.aria",'[aria-haspopup="true"]',(function(e){t(e.currentTarget).attr("aria-expanded",!0)})),t('[role="menubar"]').on("blur.aria  mouseleave.aria",'[aria-haspopup="true"]',(function(e){t(e.currentTarget).attr("aria-expanded",!1)}))}))},function(t,e){
/*!
Waypoints - 4.0.1
Copyright Â© 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
!function(){"use strict";var t=0,e={};function n(i){if(!i)throw new Error("No options passed to Waypoint constructor");if(!i.element)throw new Error("No element option passed to Waypoint constructor");if(!i.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+t,this.options=n.Adapter.extend({},n.defaults,i),this.element=this.options.element,this.adapter=new n.Adapter(this.element),this.callback=i.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=n.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=n.Context.findOrCreateByElement(this.options.context),n.offsetAliases[this.options.offset]&&(this.options.offset=n.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),e[this.key]=this,t+=1}n.prototype.queueTrigger=function(t){this.group.queueTrigger(this,t)},n.prototype.trigger=function(t){this.enabled&&this.callback&&this.callback.apply(this,t)},n.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete e[this.key]},n.prototype.disable=function(){return this.enabled=!1,this},n.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},n.prototype.next=function(){return this.group.next(this)},n.prototype.previous=function(){return this.group.previous(this)},n.invokeAll=function(t){var n=[];for(var i in e)n.push(e[i]);for(var o=0,r=n.length;o<r;o++)n[o][t]()},n.destroyAll=function(){n.invokeAll("destroy")},n.disableAll=function(){n.invokeAll("disable")},n.enableAll=function(){for(var t in n.Context.refreshAll(),e)e[t].enabled=!0;return this},n.refreshAll=function(){n.Context.refreshAll()},n.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},n.viewportWidth=function(){return document.documentElement.clientWidth},n.adapters=[],n.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},n.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=n}(),function(){"use strict";function t(t){window.setTimeout(t,1e3/60)}var e=0,n={},i=window.Waypoint,o=window.onload;function r(t){this.element=t,this.Adapter=i.Adapter,this.adapter=new this.Adapter(t),this.key="waypoint-context-"+e,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,n[t.waypointContextKey]=this,e+=1,i.windowContext||(i.windowContext=!0,i.windowContext=new r(window)),this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}r.prototype.add=function(t){var e=t.options.horizontal?"horizontal":"vertical";this.waypoints[e][t.key]=t,this.refresh()},r.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),e=this.Adapter.isEmptyObject(this.waypoints.vertical),i=this.element==this.element.window;t&&e&&!i&&(this.adapter.off(".waypoints"),delete n[this.key])},r.prototype.createThrottledResizeHandler=function(){var t=this;function e(){t.handleResize(),t.didResize=!1}this.adapter.on("resize.waypoints",(function(){t.didResize||(t.didResize=!0,i.requestAnimationFrame(e))}))},r.prototype.createThrottledScrollHandler=function(){var t=this;function e(){t.handleScroll(),t.didScroll=!1}this.adapter.on("scroll.waypoints",(function(){t.didScroll&&!i.isTouch||(t.didScroll=!0,i.requestAnimationFrame(e))}))},r.prototype.handleResize=function(){i.Context.refreshAll()},r.prototype.handleScroll=function(){var t={},e={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var n in e){var i=e[n],o=i.newScroll>i.oldScroll?i.forward:i.backward;for(var r in this.waypoints[n]){var a=this.waypoints[n][r];if(null!==a.triggerPoint){var s=i.oldScroll<a.triggerPoint,l=i.newScroll>=a.triggerPoint;(s&&l||!s&&!l)&&(a.queueTrigger(o),t[a.group.id]=a.group)}}}for(var c in t)t[c].flushTriggers();this.oldScroll={x:e.horizontal.newScroll,y:e.vertical.newScroll}},r.prototype.innerHeight=function(){return this.element==this.element.window?i.viewportHeight():this.adapter.innerHeight()},r.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},r.prototype.innerWidth=function(){return this.element==this.element.window?i.viewportWidth():this.adapter.innerWidth()},r.prototype.destroy=function(){var t=[];for(var e in this.waypoints)for(var n in this.waypoints[e])t.push(this.waypoints[e][n]);for(var i=0,o=t.length;i<o;i++)t[i].destroy()},r.prototype.refresh=function(){var t,e=this.element==this.element.window,n=e?void 0:this.adapter.offset(),o={};for(var r in this.handleScroll(),t={horizontal:{contextOffset:e?0:n.left,contextScroll:e?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:e?0:n.top,contextScroll:e?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}}){var a=t[r];for(var s in this.waypoints[r]){var l,c,u,d,f=this.waypoints[r][s],p=f.options.offset,h=f.triggerPoint,m=0,g=null==h;f.element!==f.element.window&&(m=f.adapter.offset()[a.offsetProp]),"function"==typeof p?p=p.apply(f):"string"==typeof p&&(p=parseFloat(p),f.options.offset.indexOf("%")>-1&&(p=Math.ceil(a.contextDimension*p/100))),l=a.contextScroll-a.contextOffset,f.triggerPoint=Math.floor(m+l-p),c=h<a.oldScroll,u=f.triggerPoint>=a.oldScroll,d=!c&&!u,!g&&(c&&u)?(f.queueTrigger(a.backward),o[f.group.id]=f.group):(!g&&d||g&&a.oldScroll>=f.triggerPoint)&&(f.queueTrigger(a.forward),o[f.group.id]=f.group)}}return i.requestAnimationFrame((function(){for(var t in o)o[t].flushTriggers()})),this},r.findOrCreateByElement=function(t){return r.findByElement(t)||new r(t)},r.refreshAll=function(){for(var t in n)n[t].refresh()},r.findByElement=function(t){return n[t.waypointContextKey]},window.onload=function(){o&&o(),r.refreshAll()},i.requestAnimationFrame=function(e){(window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t).call(window,e)},i.Context=r}(),function(){"use strict";function t(t,e){return t.triggerPoint-e.triggerPoint}function e(t,e){return e.triggerPoint-t.triggerPoint}var n={vertical:{},horizontal:{}},i=window.Waypoint;function o(t){this.name=t.name,this.axis=t.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),n[this.axis][this.name]=this}o.prototype.add=function(t){this.waypoints.push(t)},o.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},o.prototype.flushTriggers=function(){for(var n in this.triggerQueues){var i=this.triggerQueues[n],o="up"===n||"left"===n;i.sort(o?e:t);for(var r=0,a=i.length;r<a;r+=1){var s=i[r];(s.options.continuous||r===i.length-1)&&s.trigger([n])}}this.clearTriggerQueues()},o.prototype.next=function(e){this.waypoints.sort(t);var n=i.Adapter.inArray(e,this.waypoints);return n===this.waypoints.length-1?null:this.waypoints[n+1]},o.prototype.previous=function(e){this.waypoints.sort(t);var n=i.Adapter.inArray(e,this.waypoints);return n?this.waypoints[n-1]:null},o.prototype.queueTrigger=function(t,e){this.triggerQueues[e].push(t)},o.prototype.remove=function(t){var e=i.Adapter.inArray(t,this.waypoints);e>-1&&this.waypoints.splice(e,1)},o.prototype.first=function(){return this.waypoints[0]},o.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},o.findOrCreate=function(t){return n[t.axis][t.name]||new o(t)},i.Group=o}(),function(){"use strict";var t=window.Waypoint;function e(t){return t===t.window}function n(t){return e(t)?t:t.defaultView}function i(t){this.element=t,this.handlers={}}i.prototype.innerHeight=function(){return e(this.element)?this.element.innerHeight:this.element.clientHeight},i.prototype.innerWidth=function(){return e(this.element)?this.element.innerWidth:this.element.clientWidth},i.prototype.off=function(t,e){function n(t,e,n){for(var i=0,o=e.length-1;i<o;i++){var r=e[i];n&&n!==r||t.removeEventListener(r)}}var i=t.split("."),o=i[0],r=i[1],a=this.element;if(r&&this.handlers[r]&&o)n(a,this.handlers[r][o],e),this.handlers[r][o]=[];else if(o)for(var s in this.handlers)n(a,this.handlers[s][o]||[],e),this.handlers[s][o]=[];else if(r&&this.handlers[r]){for(var l in this.handlers[r])n(a,this.handlers[r][l],e);this.handlers[r]={}}},i.prototype.offset=function(){if(!this.element.ownerDocument)return null;var t=this.element.ownerDocument.documentElement,e=n(this.element.ownerDocument),i={top:0,left:0};return this.element.getBoundingClientRect&&(i=this.element.getBoundingClientRect()),{top:i.top+e.pageYOffset-t.clientTop,left:i.left+e.pageXOffset-t.clientLeft}},i.prototype.on=function(t,e){var n=t.split("."),i=n[0],o=n[1]||"__default",r=this.handlers[o]=this.handlers[o]||{};(r[i]=r[i]||[]).push(e),this.element.addEventListener(i,e)},i.prototype.outerHeight=function(t){var n,i=this.innerHeight();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginTop,10),i+=parseInt(n.marginBottom,10)),i},i.prototype.outerWidth=function(t){var n,i=this.innerWidth();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginLeft,10),i+=parseInt(n.marginRight,10)),i},i.prototype.scrollLeft=function(){var t=n(this.element);return t?t.pageXOffset:this.element.scrollLeft},i.prototype.scrollTop=function(){var t=n(this.element);return t?t.pageYOffset:this.element.scrollTop},i.extend=function(){var t=Array.prototype.slice.call(arguments);function e(t,e){if("object"==typeof t&&"object"==typeof e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}for(var n=1,i=t.length;n<i;n++)e(t[0],t[n]);return t[0]},i.inArray=function(t,e,n){return null==e?-1:e.indexOf(t,n)},i.isEmptyObject=function(t){for(var e in t)return!1;return!0},t.adapters.push({name:"noframework",Adapter:i}),t.Adapter=i}()},function(t,e){
/*!
Waypoints Sticky Element Shortcut - 4.0.1
Copyright Â© 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
!function(){"use strict";var t=window.jQuery,e=window.Waypoint;function n(i){this.options=t.extend({},e.defaults,n.defaults,i),this.element=this.options.element,this.$element=t(this.element),this.createWrapper(),this.createWaypoint()}n.prototype.createWaypoint=function(){var n=this.options.handler;this.waypoint=new e(t.extend({},this.options,{element:this.wrapper,handler:t.proxy((function(t){var e=this.options.direction.indexOf(t)>-1,i=e?this.$element.outerHeight(!0):"";this.$wrapper.height(i),this.$element.toggleClass(this.options.stuckClass,e),n&&n.call(this,t)}),this)}))},n.prototype.createWrapper=function(){this.options.wrapper&&this.$element.wrap(this.options.wrapper),this.$wrapper=this.$element.parent(),this.wrapper=this.$wrapper[0]},n.prototype.destroy=function(){this.$element.parent()[0]===this.wrapper&&(this.waypoint.destroy(),this.$element.removeClass(this.options.stuckClass),this.options.wrapper&&this.$element.unwrap())},n.defaults={wrapper:'<div class="sticky-wrapper" />',stuckClass:"stuck",direction:"down right"},e.Sticky=n}()},function(t,e){
/**
@license Sticky-kit v1.1.3 | WTFPL | Leaf Corcoran 2015 | http://leafo.net
*/
(function(){var t,e;t=this.jQuery||window.jQuery,e=t(window),t.fn.stick_in_parent=function(n){var i,o,r,a,s,l,c,u,d,f,p,h,m;for(null==n&&(n={}),f=n.sticky_class,a=n.inner_scrolling,d=n.recalc_every,u=n.parent,l=n.offset_top,s=n.spacer,r=n.bottoming,null==l&&(l=0),null==u&&(u=void 0),null==a&&(a=!0),null==f&&(f="is_stuck"),i=t(document),null==r&&(r=!0),c=function(t){var e,n;return window.getComputedStyle?(t[0],e=window.getComputedStyle(t[0]),n=parseFloat(e.getPropertyValue("width"))+parseFloat(e.getPropertyValue("margin-left"))+parseFloat(e.getPropertyValue("margin-right")),"border-box"!==e.getPropertyValue("box-sizing")&&(n+=parseFloat(e.getPropertyValue("border-left-width"))+parseFloat(e.getPropertyValue("border-right-width"))+parseFloat(e.getPropertyValue("padding-left"))+parseFloat(e.getPropertyValue("padding-right"))),n):t.outerWidth(!0)},p=function(n,o,p,h,m,g,y,v){var w,b,x,k,S,T,A,E,O,L,C,j;if(!n.data("sticky_kit")){if(n.data("sticky_kit",!0),S=i.height(),A=n.parent(),null!=u&&(A=A.closest(u)),!A.length)throw"failed to find stick parent";if(x=!1,w=!1,(C=null!=s?s&&n.closest(s):t("<div />"))&&C.css("position",n.css("position")),(E=function(){var t,e,r;if(!v)return S=i.height(),t=parseInt(A.css("border-top-width"),10),e=parseInt(A.css("padding-top"),10),o=parseInt(A.css("padding-bottom"),10),p=A.offset().top+t+e,h=A.height(),x&&(x=!1,w=!1,null==s&&(n.insertAfter(C),C.detach()),n.css({position:"",top:"",width:"",bottom:""}).removeClass(f),r=!0),m=n.offset().top-(parseInt(n.css("margin-top"),10)||0)-l,g=n.outerHeight(!0),y=n.css("float"),C&&C.css({width:c(n),height:g,display:n.css("display"),"vertical-align":n.css("vertical-align"),float:y}),r?j():void 0})(),g!==h)return k=void 0,T=l,L=d,j=function(){var t,c,u,b,O,j;if(!v)return u=!1,null!=L&&(L-=1)<=0&&(L=d,E(),u=!0),u||i.height()===S||(E(),u=!0),b=e.scrollTop(),null!=k&&(c=b-k),k=b,x?(r&&(O=b+g+T>h+p,w&&!O&&(w=!1,n.css({position:"fixed",bottom:"",top:T}).trigger("sticky_kit:unbottom"))),b<m&&(x=!1,T=l,null==s&&("left"!==y&&"right"!==y||n.insertAfter(C),C.detach()),t={position:"",width:"",top:""},n.css(t).removeClass(f).trigger("sticky_kit:unstick")),a&&(j=e.height(),g+l>j&&(w||(T-=c,T=Math.max(j-g,T),T=Math.min(l,T),x&&n.css({top:T+"px"}))))):b>m&&(x=!0,(t={position:"fixed",top:T}).width="border-box"===n.css("box-sizing")?n.outerWidth()+"px":n.width()+"px",n.css(t).addClass(f),null==s&&(n.after(C),"left"!==y&&"right"!==y||C.append(n)),n.trigger("sticky_kit:stick")),x&&r&&(null==O&&(O=b+g+T>h+p),!w&&O)?(w=!0,"static"===A.css("position")&&A.css({position:"relative"}),n.css({position:"absolute",bottom:o,top:"auto"}).trigger("sticky_kit:bottom")):void 0},O=function(){return E(),j()},b=function(){if(v=!0,e.off("touchmove",j),e.off("scroll",j),e.off("resize",O),t(document.body).off("sticky_kit:recalc",O),n.off("sticky_kit:detach",b),n.removeData("sticky_kit"),n.css({position:"",bottom:"",top:"",width:""}),A.position("position",""),x)return null==s&&("left"!==y&&"right"!==y||n.insertAfter(C),C.remove()),n.removeClass(f)},e.on("touchmove",j),e.on("scroll",j),e.on("resize",O),t(document.body).on("sticky_kit:recalc",O),n.on("sticky_kit:detach",b),setTimeout(j,0)}},h=0,m=this.length;h<m;h++)o=this[h],p(t(o));return this}}).call(this)},function(t,e){!function(){"use strict";var t,e;void 0===window.CCHealth&&(window.CCHealth={}),window.CCHealth.visibleMenu=(t=function(t){var e,n,i=t.target.querySelector(".sub-menu");i&&(e=i,n=window.outerWidth,e.getBoundingClientRect().right<n||function(t){t&&t.classList.add("left-menu")}(i))},e=function(t){var e=t.target.querySelector(".sub-menu");setTimeout((function(){e.classList.remove("left-menu")}),500)},{init:function(){var n=document.querySelector(".primary-navigation").querySelectorAll(".sub-menu li .sub-menu");if(n)for(var i=0;i<n.length;i++){var o=n[i].parentElement;o.addEventListener("mouseenter",t),o.addEventListener("mouseleave",e)}}}),document.addEventListener("DOMContentLoaded",window.CCHealth.visibleMenu.init)}()},,,,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e);var i=n(6),o=n.n(i);n(14);n(12),n(13);var r=n(9),a=n.n(r),s=function(){var t=document.getElementById("alert-banner"),e=document.querySelector("body.has-alert-banner #page");t&&e&&(e.style.top="".concat(t.offsetHeight,"px"),window.addEventListener("resize",a()((function(){e.style.top="".concat(t.offsetHeight,"px")})),250))},l=function(){document.querySelectorAll(".wp-block-healthessentials-slideshow").forEach((function(t){tns({container:t,nav:!1})}))};var c,u,d=window.CCHealth||{};d.resizeTimer=null,d.setCookie=function(t,e,n){var i="";if(n){var o=new Date;o.setTime(o.getTime()+24*n*60*60*1e3),i="; expires="+o.toUTCString()}document.cookie=t+"="+e+i+"; path=/"},d.readCookie=function(t){for(var e=t+"=",n=document.cookie.split(";"),i=0;i<n.length;i++){for(var o=n[i];" "===o.charAt(0);)o=o.substring(1,o.length);if(0===o.indexOf(e))return o.substring(e.length,o.length)}return null},d.resizeHandler=function(){clearTimeout(d.resizeTimer),d.resizeTimer=setTimeout(d.searchInputHandler,300)},d.setupMobileMenu=function(){document.querySelectorAll(".site-menu-toggle").forEach((function(t){t.addEventListener("click",d.primaryNavigation)}))},d.primaryNavigation=function(t){var e=document.querySelectorAll(".primary-navigation")[0],n=document.getElementsByTagName("body")[0];t.preventDefault(),d.globalMenuOff(),e.classList.contains("active")||n.classList.contains("nav-search-active")?(d.mobileSearchOff(),d.primaryNavigationOff(),t.currentTarget.setAttribute("aria-expanded","false")):(d.primaryNavigationOn(),t.currentTarget.setAttribute("aria-expanded","true"))},d.primaryNavigationOff=function(){var t=document.querySelectorAll(".primary-navigation")[0],e=document.getElementsByTagName("body")[0],n=document.getElementsByTagName("html")[0];t.classList.remove("active"),e.classList.remove("nav-gradient-blue"),n.classList.remove("active-menu")},d.primaryNavigationOn=function(){var t=document.querySelectorAll(".primary-navigation")[0],e=document.getElementsByTagName("body")[0],n=document.getElementsByTagName("html")[0];t.classList.add("active"),e.classList.add("nav-gradient-blue"),e.classList.remove("nav-search-active"),n.classList.add("active-menu")},d.globalMenu=function(){var t=document.getElementById("js-global-menu-toggle"),e=document.getElementById("menu-global-menu");t.onclick=function(){d.mobileSearchOff(),d.primaryNavigationOff(),e.classList.contains("active")?("false"===t.getAttribute("aria-expanded")?(t.setAttribute("aria-expanded","true"),t.innerHTML="Close"):(t.setAttribute("aria-expanded","false"),t.innerHTML="Menu"),d.globalMenuOff()):d.globalMenuOn()}},d.globalMenuOff=function(){var t=document.getElementById("js-global-menu-toggle"),e=document.getElementById("menu-global-menu"),n=document.getElementsByTagName("body")[0],i=document.getElementsByTagName("html")[0];e.classList.remove("active"),n.classList.remove("nav-gradient-red"),i.classList.remove("active-menu"),t.setAttribute("aria-expanded","false")},d.globalMenuOn=function(){var t=document.getElementById("js-global-menu-toggle"),e=document.getElementById("menu-global-menu"),n=document.getElementsByTagName("body")[0],i=document.getElementsByTagName("html")[0];e.classList.add("active"),n.classList.add("nav-gradient-red"),n.classList.remove("nav-gradient-blue"),n.classList.remove("nav-search-active"),i.classList.add("active-menu"),t.setAttribute("aria-expanded","true")},d.mobileSearch=function(){var t=document.querySelectorAll(".js-mobile-search-toggle"),e=document.querySelectorAll('#searchform input[type="text"]')[0];t.forEach((function(t){t.onclick=function(t){(window.innerWidth||document.documentElement.clientWidth)<=980&&"false"!=e.getAttribute("aria-hidden")&&(t.preventDefault(),d.primaryNavigationOff(),d.globalMenuOff(),d.mobileSearchOn())}}))},d.mobileSearchOn=function(){var t=document.querySelectorAll('#searchform input[type="text"]')[0],e=document.getElementsByTagName("body")[0],n=document.getElementsByTagName("html")[0];d.primaryNavigationOff(),d.globalMenuOff(),t.setAttribute("aria-hidden","false"),t.style.display="block",e.classList.add("nav-gradient-blue"),e.classList.add("nav-search-active"),n.classList.add("active-menu")},d.mobileSearchOff=function(){var t=window.innerWidth||document.documentElement.clientWidth,e=document.querySelectorAll('#searchform input[type="text"]')[0],n=document.getElementsByTagName("body")[0],i=document.getElementsByTagName("html")[0];t<=980&&(e.setAttribute("aria-hidden","true"),e.style.display="none"),n.classList.remove("nav-gradient-blue"),n.classList.remove("nav-search-active"),i.classList.add("active-menu")},d.searchInputHandler=function(){var t=document.querySelectorAll('#searchform input[type="text"]')[0],e=document.getElementsByTagName("body")[0];(window.innerWidth||document.documentElement.clientWidth)<=980&&!e.classList.contains("nav-search-active")?(t.setAttribute("aria-hidden","true"),t.style.display="none"):(t.setAttribute("aria-hidden","false"),t.style.display="block")},d.socialTracking=function(){var t=window.location.href,e="",n="",i=document.querySelector(".share-links");null!==i&&i.addEventListener("click",(function(i){"A"!==i.target.tagName&&"BUTTON"!==i.target.tagName||(e="",i.target.classList.contains("facebook")&&(e="facebook"),i.target.classList.contains("twitter")&&(e="twitter"),i.target.classList.contains("linkedin")&&(e="linkedin"),i.target.classList.contains("pinterest")&&(e="pinterest"),i.target.classList.contains("email-share")&&(e="email"),e.length&&"undefined"!=typeof ga&&(n=ga.getAll()[0].get("name"),ga(n+".send","event","share click",e,t)))}),!0)},d.globalMenu(),d.setupMobileMenu(),d.mobileSearch(),d.socialTracking(),d.searchInputHandler(),window.CCHealthMarketoData&&window.MktoForms2&&window.CCHealthMarketoData.forEach((function(t){window.MktoForms2.loadForm(t.url,t.munchkinId,t.formId,(function(e){var n=document.getElementById("marketo-form-container-"+t.munchkinId+"-"+t.formId),i="";e.onSubmit((function(){var t=n.querySelector("button[type=submit]");t&&(i=t.innerText)})),e.onSuccess((function(){var o=document.getElementById("js-success-message-"+t.munchkinId+"-"+t.formId);null!=o&&(o.style.display="block"),Object.keys(e.getValues()).forEach((function(t){if("formid"!==t&&"munchkinId"!==t){var e=n.querySelector('input[name="'+t+'"]');if(e)switch(e.type){case"checkbox":e.checked=!1;break;case"text":default:e.value=""}}}));var r=n.querySelector("button[type=submit]");return r&&(r.innerText=i,r.removeAttribute("disabled")),!1}))}))})),c=!1,(u=document.querySelector(".related-articles.preload-view-more"))&&u.querySelector("a.button").addEventListener("click",(function(t){c||(t.preventDefault(),u.classList.remove("preload-view-more"),c=!0)})),document.getElementsByTagName("body")[0].onresize=d.resizeHandler,document.addEventListener("DOMContentLoaded",(function(){document.querySelectorAll(".ad.lazy-load").forEach((function(t){var e=t.getBoundingClientRect(),n=!1;window.addEventListener("scroll",o()((function i(){var o=window.pageYOffset||document.documentElement.scrollTop;e.y-window.screen.height-o<=400&&!n&&(googletag.cmd.push((function(){googletag.display(t.id)})),n=!0,window.removeEventListener("scroll",i))}),100))})),l(),s(),document.body.classList.contains("single")&&function(){var t=document.querySelector("#main .entry-content").offsetHeight,e=[],n=document.querySelectorAll(".sticky-ad"),i=[1e3,1e3,800,800,800];n.forEach((function(n,o){(t-=i[o])>0?e.push(n):n.remove()}));var o=jQuery;o(".sticky-ad .ad-policy-desktop").stick_in_parent({offset_top:270,spacer:!1}),o(".sticky-ad > .ad").stick_in_parent({offset_top:10,spacer:!1})}()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC50aHJvdHRsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2guZGVib3VuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3ZlbmRvci93YWktYXJpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2F5cG9pbnRzL2xpYi9ub2ZyYW1ld29yay53YXlwb2ludHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dheXBvaW50cy9saWIvc2hvcnRjdXRzL3N0aWNreS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RpY2t5LWtpdC9kaXN0L3N0aWNreS1raXQuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3NyYy92aXNpYmxlLW5hdi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvc3JjL2Fkcy5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvc3JjL2FsZXJ0LWJhbm5lci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvc3JjL3NsaWRlc2hvdy5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvc3JjL2NsZXZlbGFuZC1jbGluaWMuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3NyYy92aWV3LW1vcmUuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3NyYy9tYXJrZXRvLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJwYXJzZUludCIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJvYmplY3RUb1N0cmluZyIsInRvU3RyaW5nIiwibmF0aXZlTWF4IiwiTWF0aCIsIm1heCIsIm5hdGl2ZU1pbiIsIm1pbiIsIm5vdyIsIkRhdGUiLCJkZWJvdW5jZSIsImZ1bmMiLCJ3YWl0Iiwib3B0aW9ucyIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwicmVzdWx0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsInRyYWlsaW5nIiwiVHlwZUVycm9yIiwiaW52b2tlRnVuYyIsInRpbWUiLCJhcmdzIiwidGhpc0FyZyIsInVuZGVmaW5lZCIsImFwcGx5IiwibGVhZGluZ0VkZ2UiLCJzZXRUaW1lb3V0IiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImFyZ3VtZW50cyIsInRoaXMiLCJ0b051bWJlciIsImlzT2JqZWN0IiwiY2FuY2VsIiwiY2xlYXJUaW1lb3V0IiwiZmx1c2giLCJ0eXBlIiwiaXNPYmplY3RMaWtlIiwiaXNTeW1ib2wiLCJvdGhlciIsInZhbHVlT2YiLCJyZXBsYWNlIiwiaXNCaW5hcnkiLCJ0ZXN0Iiwic2xpY2UiLCJnIiwiZSIsIndpbmRvdyIsImpRdWVyeSIsIiQiLCJvbiIsImV2IiwiY3VycmVudFRhcmdldCIsImF0dHIiLCJrZXlDb3VudGVyIiwiYWxsV2F5cG9pbnRzIiwiV2F5cG9pbnQiLCJFcnJvciIsImVsZW1lbnQiLCJoYW5kbGVyIiwiQWRhcHRlciIsImV4dGVuZCIsImRlZmF1bHRzIiwiYWRhcHRlciIsImNhbGxiYWNrIiwiYXhpcyIsImhvcml6b250YWwiLCJlbmFibGVkIiwidHJpZ2dlclBvaW50IiwiZ3JvdXAiLCJHcm91cCIsImZpbmRPckNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwiZmluZE9yQ3JlYXRlQnlFbGVtZW50Iiwib2Zmc2V0QWxpYXNlcyIsIm9mZnNldCIsImFkZCIsInF1ZXVlVHJpZ2dlciIsImRpcmVjdGlvbiIsInRyaWdnZXIiLCJkZXN0cm95IiwicmVtb3ZlIiwiZGlzYWJsZSIsImVuYWJsZSIsInJlZnJlc2giLCJuZXh0IiwicHJldmlvdXMiLCJpbnZva2VBbGwiLCJtZXRob2QiLCJhbGxXYXlwb2ludHNBcnJheSIsIndheXBvaW50S2V5IiwicHVzaCIsImVuZCIsImxlbmd0aCIsImRlc3Ryb3lBbGwiLCJkaXNhYmxlQWxsIiwiZW5hYmxlQWxsIiwicmVmcmVzaEFsbCIsInZpZXdwb3J0SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsInZpZXdwb3J0V2lkdGgiLCJjbGllbnRXaWR0aCIsImFkYXB0ZXJzIiwiY29udGludW91cyIsIm91dGVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsIm91dGVyV2lkdGgiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVTaGltIiwiY29udGV4dHMiLCJvbGRXaW5kb3dMb2FkIiwib25sb2FkIiwiZGlkU2Nyb2xsIiwiZGlkUmVzaXplIiwib2xkU2Nyb2xsIiwieCIsInNjcm9sbExlZnQiLCJ5Iiwic2Nyb2xsVG9wIiwid2F5cG9pbnRzIiwidmVydGljYWwiLCJ3YXlwb2ludENvbnRleHRLZXkiLCJ3aW5kb3dDb250ZXh0IiwiY3JlYXRlVGhyb3R0bGVkU2Nyb2xsSGFuZGxlciIsImNyZWF0ZVRocm90dGxlZFJlc2l6ZUhhbmRsZXIiLCJ3YXlwb2ludCIsImNoZWNrRW1wdHkiLCJob3Jpem9udGFsRW1wdHkiLCJpc0VtcHR5T2JqZWN0IiwidmVydGljYWxFbXB0eSIsImlzV2luZG93Iiwib2ZmIiwicmVzaXplSGFuZGxlciIsImhhbmRsZVJlc2l6ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNjcm9sbEhhbmRsZXIiLCJoYW5kbGVTY3JvbGwiLCJpc1RvdWNoIiwidHJpZ2dlcmVkR3JvdXBzIiwiYXhlcyIsIm5ld1Njcm9sbCIsImZvcndhcmQiLCJiYWNrd2FyZCIsImF4aXNLZXkiLCJ3YXNCZWZvcmVUcmlnZ2VyUG9pbnQiLCJub3dBZnRlclRyaWdnZXJQb2ludCIsImlkIiwiZ3JvdXBLZXkiLCJmbHVzaFRyaWdnZXJzIiwiY29udGV4dE9mZnNldCIsImxlZnQiLCJjb250ZXh0U2Nyb2xsIiwiY29udGV4dERpbWVuc2lvbiIsIm9mZnNldFByb3AiLCJ0b3AiLCJjb250ZXh0TW9kaWZpZXIiLCJ3YXNCZWZvcmVTY3JvbGwiLCJub3dBZnRlclNjcm9sbCIsInRyaWdnZXJlZEZvcndhcmQiLCJhZGp1c3RtZW50Iiwib2xkVHJpZ2dlclBvaW50IiwiZWxlbWVudE9mZnNldCIsImZyZXNoV2F5cG9pbnQiLCJwYXJzZUZsb2F0IiwiaW5kZXhPZiIsImNlaWwiLCJmbG9vciIsImZpbmRCeUVsZW1lbnQiLCJjb250ZXh0SWQiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJieVRyaWdnZXJQb2ludCIsImEiLCJiIiwiYnlSZXZlcnNlVHJpZ2dlclBvaW50IiwiZ3JvdXBzIiwiY2xlYXJUcmlnZ2VyUXVldWVzIiwidHJpZ2dlclF1ZXVlcyIsInVwIiwiZG93biIsInJpZ2h0IiwicmV2ZXJzZSIsInNvcnQiLCJpbmRleCIsImluQXJyYXkiLCJzcGxpY2UiLCJmaXJzdCIsImxhc3QiLCJnZXRXaW5kb3ciLCJkZWZhdWx0VmlldyIsIk5vRnJhbWV3b3JrQWRhcHRlciIsImhhbmRsZXJzIiwiZXZlbnQiLCJyZW1vdmVMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudFBhcnRzIiwic3BsaXQiLCJldmVudFR5cGUiLCJuYW1lc3BhY2UiLCJvd25lckRvY3VtZW50Iiwid2luIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhZ2VZT2Zmc2V0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0IiwibnNIYW5kbGVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbmNsdWRlTWFyZ2luIiwiY29tcHV0ZWRTdHlsZSIsImhlaWdodCIsImdldENvbXB1dGVkU3R5bGUiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJ3aWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIkFycmF5IiwibWVyZ2UiLCJ0YXJnZXQiLCJvYmoiLCJhcnJheSIsIlN0aWNreSIsIiRlbGVtZW50IiwiY3JlYXRlV3JhcHBlciIsImNyZWF0ZVdheXBvaW50Iiwib3JpZ2luYWxIYW5kbGVyIiwid3JhcHBlciIsInByb3h5Iiwic2hvdWxkQmVTdHVjayIsIndyYXBwZXJIZWlnaHQiLCIkd3JhcHBlciIsInRvZ2dsZUNsYXNzIiwic3R1Y2tDbGFzcyIsIndyYXAiLCJwYXJlbnQiLCJyZW1vdmVDbGFzcyIsInVud3JhcCIsImZuIiwic3RpY2tfaW5fcGFyZW50Iiwib3B0cyIsImRvYyIsImVsbSIsImVuYWJsZV9ib3R0b21pbmciLCJpbm5lcl9zY3JvbGxpbmciLCJtYW51YWxfc3BhY2VyIiwib2Zmc2V0X3RvcCIsIm91dGVyX3dpZHRoIiwicGFyZW50X3NlbGVjdG9yIiwicmVjYWxjX2V2ZXJ5Iiwic3RpY2t5X2NsYXNzIiwiX2ZuIiwiX2kiLCJfbGVuIiwic3BhY2VyIiwiYm90dG9taW5nIiwiZWwiLCJjb21wdXRlZCIsInciLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGFkZGluZ19ib3R0b20iLCJwYXJlbnRfdG9wIiwicGFyZW50X2hlaWdodCIsImVsX2Zsb2F0IiwiZGV0YWNoZWQiLCJib3R0b21lZCIsImRldGFjaCIsImZpeGVkIiwibGFzdF9wb3MiLCJsYXN0X3Njcm9sbF9oZWlnaHQiLCJyZWNhbGMiLCJyZWNhbGNfYW5kX3RpY2siLCJyZWNhbGNfY291bnRlciIsInRpY2siLCJkYXRhIiwiY2xvc2VzdCIsImNzcyIsImJvcmRlcl90b3AiLCJwYWRkaW5nX3RvcCIsInJlc3RvcmUiLCJpbnNlcnRBZnRlciIsInBvc2l0aW9uIiwiYm90dG9tIiwiZGlzcGxheSIsImRlbHRhIiwicmVjYWxjZWQiLCJzY3JvbGwiLCJ3aWxsX2JvdHRvbSIsIndpbl9oZWlnaHQiLCJhZGRDbGFzcyIsImFmdGVyIiwiYXBwZW5kIiwiYm9keSIsInJlbW92ZURhdGEiLCJwb3NpdGlvbk1lbnUiLCJyZXN0b3JlTWVudSIsIkNDSGVhbHRoIiwidmlzaWJsZU1lbnUiLCJtZW51Iiwic3ViTWVudSIsInF1ZXJ5U2VsZWN0b3IiLCJjbGFzc0xpc3QiLCJzd2l0Y2hNZW51UG9zaXRpb24iLCJpbml0IiwibGlzdEl0ZW1zIiwicXVlcnlTZWxlY3RvckFsbCIsInBhcmVudExpIiwicGFyZW50RWxlbWVudCIsInJlcXVpcmUiLCJhbGVydEJhbm5lciIsImdldEVsZW1lbnRCeUlkIiwicGFnZVdyYXBwZXIiLCJzdHlsZSIsIm9mZnNldEhlaWdodCIsInNsaWRlc2hvdyIsImZvckVhY2giLCJ0bnMiLCJjb250YWluZXIiLCJuYXYiLCJkaXNwbGF5ZWQiLCJyZWNlbnRBcnRpY2xlcyIsInJlc2l6ZVRpbWVyIiwic2V0Q29va2llIiwiZGF5cyIsImV4cGlyZXMiLCJkYXRlIiwic2V0VGltZSIsImdldFRpbWUiLCJ0b1VUQ1N0cmluZyIsImNvb2tpZSIsInJlYWRDb29raWUiLCJuYW1lRVEiLCJjYSIsImNoYXJBdCIsInN1YnN0cmluZyIsInNlYXJjaElucHV0SGFuZGxlciIsInNldHVwTW9iaWxlTWVudSIsInRvZ2dsZSIsInByaW1hcnlOYXZpZ2F0aW9uIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwcmV2ZW50RGVmYXVsdCIsImdsb2JhbE1lbnVPZmYiLCJjb250YWlucyIsIm1vYmlsZVNlYXJjaE9mZiIsInByaW1hcnlOYXZpZ2F0aW9uT2ZmIiwic2V0QXR0cmlidXRlIiwicHJpbWFyeU5hdmlnYXRpb25PbiIsImh0bWwiLCJnbG9iYWxNZW51Iiwib25jbGljayIsImdldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsImdsb2JhbE1lbnVPbiIsIm1vYmlsZVNlYXJjaCIsImlucHV0IiwibW9iaWxlU2VhcmNoT24iLCJzY3JlZW5XaWR0aCIsInNvY2lhbFRyYWNraW5nIiwidXJsIiwibG9jYXRpb24iLCJocmVmIiwicGxhdGZvcm0iLCJ0cmFja2VyIiwidGFnTmFtZSIsImdhIiwiZ2V0QWxsIiwiQ0NIZWFsdGhNYXJrZXRvRGF0YSIsIk1rdG9Gb3JtczIiLCJsb2FkRm9ybSIsIm11bmNoa2luSWQiLCJmb3JtSWQiLCJmb3JtIiwiYnV0dG9uVGV4dCIsIm9uU3VibWl0IiwiYnV0dG9uIiwiaW5uZXJUZXh0Iiwib25TdWNjZXNzIiwic3VjY2Vzc01lc3NhZ2VEaXYiLCJrZXlzIiwiZ2V0VmFsdWVzIiwiY2hlY2tlZCIsInJlbW92ZUF0dHJpYnV0ZSIsIm9ucmVzaXplIiwiYWQiLCJlbFJlY3QiLCJsb2FkZWQiLCJ0aHJvdHRsZSIsIndpbmRvd1RvcCIsInNjcmVlbiIsImdvb2dsZXRhZyIsImNtZCIsInJlbWFpbmluZ0hlaWdodCIsImFkc0F2YWxpYWJsZSIsInNpZGViYXJBZHMiLCJhZHNOZWVkZWRIZWlnaHQiLCJzaWRlYmFyQWQiXSwibWFwcGluZ3MiOiI7Ozs7O2dCQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNK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QW9FLEdBQ1osSUFBTUMsRUFBU0QsRUFBR3RMLHdCQUNkd0wsR0FBUyxFQW1CYnhWLE9BQU9zSyxpQkFBa0IsU0FBVW1MLEtBZGxCLFNBQVhsTSxJQUNMLElBQU1tTSxFQUFhMVYsT0FBT2lLLGFBQWUzRyxTQUFTQyxnQkFBZ0JtQixVQUN0RDZRLEVBQU85USxFQUFJekUsT0FBTzJWLE9BQU9sTCxPQUFTaUwsR0FKWixNQU1XRixJQUM1Q0ksVUFBVUMsSUFBSWhULE1BQU0sV0FDbkIrUyxVQUFVMUcsUUFBU29HLEVBQUdoUCxPQUd2QmtQLEdBQVMsRUFDVHhWLE9BQU93SixvQkFBcUIsU0FBVUQsTUFJZSxTR2lidkQwSCxJQUNBTCxJQUdLdE4sU0FBU3FNLEtBQUtTLFVBQVV5QyxTQUFVLFdIMVVmLFdBRXpCLElBR0lpRCxFQUhnQnhTLFNBQVM2TSxjQUFlLHdCQUNSYSxhQUc5QitFLEVBQWUsR0FFakJDLEVBQWExUyxTQUFTa04saUJBQWtCLGNBRXRDeUYsRUFBa0IsQ0FBQyxJQUFNLElBQU0sSUFBSyxJQUFLLEtBRS9DRCxFQUFXOUUsU0FBUyxTQUFFZ0YsRUFBV3ZjLElBQ2hDbWMsR0FBbUJHLEVBQWdCdGMsSUFFWixFQUN0Qm9jLEVBQWFsVCxLQUFNcVQsR0FFbkJBLEVBQVUvVCxZQUlaLElBQU1qQyxFQUFJRCxPQUlWQyxFQUFHLGlDQUFrQ29NLGdCQUFpQixDQUFFTyxXQUFZLElBQUtRLFFBQVEsSUFFakZuTixFQUFHLG9CQUFxQm9NLGdCQUFpQixDQUFFTyxXQUFZLEdBQUlRLFFBQVEsSUcrU2pFMkkiLCJmaWxlIjoiY2xldmVsYW5kLWNsaW5pYy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTApO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICByZXN1bHQgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICByZXN1bHQgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuIiwiLyoqXG4gKiBXb3JrcyBpbiB0YW5kZW0gd2l0aCB0aGUgQXJpYV9XYWxrZXJfTmF2X01lbnUoKSB0byBwcm92aWRlIGFkZGl0aW9uYWxcbiAqIGFjY2Vzc2liaWxpdHkgc3VwcG9ydCB0byB0aGUgbmF2aWdhdGlvbiBtZW51LlxuICpcbiAqIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9Qcm90ZXVzVGhlbWVzL1dBSS1BUklBLVdhbGtlcl9OYXZfTWVudVxuICovXG5cbmpRdWVyeSggZnVuY3Rpb24gKCAkICkge1xuXHQvLyBGb2N1cyBzdHlsZXMgZm9yIG1lbnVzIHdoZW4gdXNpbmcga2V5Ym9hcmQgbmF2aWdhdGlvblxuXG5cdC8vIFByb3Blcmx5IHVwZGF0ZSB0aGUgQVJJQSBzdGF0ZXMgb24gZm9jdXMgKGtleWJvYXJkKSBhbmQgbW91c2Ugb3ZlciBldmVudHNcblx0JCggJ1tyb2xlPVwibWVudWJhclwiXScgKS5vbiggJ2ZvY3VzLmFyaWEgIG1vdXNlZW50ZXIuYXJpYScsICdbYXJpYS1oYXNwb3B1cD1cInRydWVcIl0nLCBmdW5jdGlvbiAoIGV2ICkge1xuXHRcdCQoIGV2LmN1cnJlbnRUYXJnZXQgKS5hdHRyKCAnYXJpYS1leHBhbmRlZCcsIHRydWUgKTtcblx0fSApO1xuXG5cdC8vIFByb3Blcmx5IHVwZGF0ZSB0aGUgQVJJQSBzdGF0ZXMgb24gYmx1ciAoa2V5Ym9hcmQpIGFuZCBtb3VzZSBvdXQgZXZlbnRzXG5cdCQoICdbcm9sZT1cIm1lbnViYXJcIl0nICkub24oICdibHVyLmFyaWEgIG1vdXNlbGVhdmUuYXJpYScsICdbYXJpYS1oYXNwb3B1cD1cInRydWVcIl0nLCBmdW5jdGlvbiAoIGV2ICkge1xuXHRcdCQoIGV2LmN1cnJlbnRUYXJnZXQgKS5hdHRyKCAnYXJpYS1leHBhbmRlZCcsIGZhbHNlICk7XG5cdH0gKTtcbn0gKTsiLCIvKiFcbldheXBvaW50cyAtIDQuMC4xXG5Db3B5cmlnaHQgwqkgMjAxMS0yMDE2IENhbGViIFRyb3VnaHRvblxuTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaHR0cHM6Ly9naXRodWIuY29tL2ltYWtld2VidGhpbmdzL3dheXBvaW50cy9ibG9iL21hc3Rlci9saWNlbnNlcy50eHRcbiovXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIHZhciBrZXlDb3VudGVyID0gMFxuICB2YXIgYWxsV2F5cG9pbnRzID0ge31cblxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvd2F5cG9pbnQgKi9cbiAgZnVuY3Rpb24gV2F5cG9pbnQob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBvcHRpb25zIHBhc3NlZCB0byBXYXlwb2ludCBjb25zdHJ1Y3RvcicpXG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5lbGVtZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGVsZW1lbnQgb3B0aW9uIHBhc3NlZCB0byBXYXlwb2ludCBjb25zdHJ1Y3RvcicpXG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5oYW5kbGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGhhbmRsZXIgb3B0aW9uIHBhc3NlZCB0byBXYXlwb2ludCBjb25zdHJ1Y3RvcicpXG4gICAgfVxuXG4gICAgdGhpcy5rZXkgPSAnd2F5cG9pbnQtJyArIGtleUNvdW50ZXJcbiAgICB0aGlzLm9wdGlvbnMgPSBXYXlwb2ludC5BZGFwdGVyLmV4dGVuZCh7fSwgV2F5cG9pbnQuZGVmYXVsdHMsIG9wdGlvbnMpXG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy5vcHRpb25zLmVsZW1lbnRcbiAgICB0aGlzLmFkYXB0ZXIgPSBuZXcgV2F5cG9pbnQuQWRhcHRlcih0aGlzLmVsZW1lbnQpXG4gICAgdGhpcy5jYWxsYmFjayA9IG9wdGlvbnMuaGFuZGxlclxuICAgIHRoaXMuYXhpcyA9IHRoaXMub3B0aW9ucy5ob3Jpem9udGFsID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJ1xuICAgIHRoaXMuZW5hYmxlZCA9IHRoaXMub3B0aW9ucy5lbmFibGVkXG4gICAgdGhpcy50cmlnZ2VyUG9pbnQgPSBudWxsXG4gICAgdGhpcy5ncm91cCA9IFdheXBvaW50Lkdyb3VwLmZpbmRPckNyZWF0ZSh7XG4gICAgICBuYW1lOiB0aGlzLm9wdGlvbnMuZ3JvdXAsXG4gICAgICBheGlzOiB0aGlzLmF4aXNcbiAgICB9KVxuICAgIHRoaXMuY29udGV4dCA9IFdheXBvaW50LkNvbnRleHQuZmluZE9yQ3JlYXRlQnlFbGVtZW50KHRoaXMub3B0aW9ucy5jb250ZXh0KVxuXG4gICAgaWYgKFdheXBvaW50Lm9mZnNldEFsaWFzZXNbdGhpcy5vcHRpb25zLm9mZnNldF0pIHtcbiAgICAgIHRoaXMub3B0aW9ucy5vZmZzZXQgPSBXYXlwb2ludC5vZmZzZXRBbGlhc2VzW3RoaXMub3B0aW9ucy5vZmZzZXRdXG4gICAgfVxuICAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMpXG4gICAgdGhpcy5jb250ZXh0LmFkZCh0aGlzKVxuICAgIGFsbFdheXBvaW50c1t0aGlzLmtleV0gPSB0aGlzXG4gICAga2V5Q291bnRlciArPSAxXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIFdheXBvaW50LnByb3RvdHlwZS5xdWV1ZVRyaWdnZXIgPSBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICB0aGlzLmdyb3VwLnF1ZXVlVHJpZ2dlcih0aGlzLCBkaXJlY3Rpb24pXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIFdheXBvaW50LnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24oYXJncykge1xuICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHRoaXMuY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuY2FsbGJhY2suYXBwbHkodGhpcywgYXJncylcbiAgICB9XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2Rlc3Ryb3kgKi9cbiAgV2F5cG9pbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbnRleHQucmVtb3ZlKHRoaXMpXG4gICAgdGhpcy5ncm91cC5yZW1vdmUodGhpcylcbiAgICBkZWxldGUgYWxsV2F5cG9pbnRzW3RoaXMua2V5XVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9kaXNhYmxlICovXG4gIFdheXBvaW50LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2VcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9lbmFibGUgKi9cbiAgV2F5cG9pbnQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY29udGV4dC5yZWZyZXNoKClcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvbmV4dCAqL1xuICBXYXlwb2ludC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdyb3VwLm5leHQodGhpcylcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvcHJldmlvdXMgKi9cbiAgV2F5cG9pbnQucHJvdG90eXBlLnByZXZpb3VzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ3JvdXAucHJldmlvdXModGhpcylcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgV2F5cG9pbnQuaW52b2tlQWxsID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgdmFyIGFsbFdheXBvaW50c0FycmF5ID0gW11cbiAgICBmb3IgKHZhciB3YXlwb2ludEtleSBpbiBhbGxXYXlwb2ludHMpIHtcbiAgICAgIGFsbFdheXBvaW50c0FycmF5LnB1c2goYWxsV2F5cG9pbnRzW3dheXBvaW50S2V5XSlcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IGFsbFdheXBvaW50c0FycmF5Lmxlbmd0aDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICBhbGxXYXlwb2ludHNBcnJheVtpXVttZXRob2RdKClcbiAgICB9XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2Rlc3Ryb3ktYWxsICovXG4gIFdheXBvaW50LmRlc3Ryb3lBbGwgPSBmdW5jdGlvbigpIHtcbiAgICBXYXlwb2ludC5pbnZva2VBbGwoJ2Rlc3Ryb3knKVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9kaXNhYmxlLWFsbCAqL1xuICBXYXlwb2ludC5kaXNhYmxlQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgV2F5cG9pbnQuaW52b2tlQWxsKCdkaXNhYmxlJylcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZW5hYmxlLWFsbCAqL1xuICBXYXlwb2ludC5lbmFibGVBbGwgPSBmdW5jdGlvbigpIHtcbiAgICBXYXlwb2ludC5Db250ZXh0LnJlZnJlc2hBbGwoKVxuICAgIGZvciAodmFyIHdheXBvaW50S2V5IGluIGFsbFdheXBvaW50cykge1xuICAgICAgYWxsV2F5cG9pbnRzW3dheXBvaW50S2V5XS5lbmFibGVkID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9yZWZyZXNoLWFsbCAqL1xuICBXYXlwb2ludC5yZWZyZXNoQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgV2F5cG9pbnQuQ29udGV4dC5yZWZyZXNoQWxsKClcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvdmlld3BvcnQtaGVpZ2h0ICovXG4gIFdheXBvaW50LnZpZXdwb3J0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL3ZpZXdwb3J0LXdpZHRoICovXG4gIFdheXBvaW50LnZpZXdwb3J0V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoXG4gIH1cblxuICBXYXlwb2ludC5hZGFwdGVycyA9IFtdXG5cbiAgV2F5cG9pbnQuZGVmYXVsdHMgPSB7XG4gICAgY29udGV4dDogd2luZG93LFxuICAgIGNvbnRpbnVvdXM6IHRydWUsXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBncm91cDogJ2RlZmF1bHQnLFxuICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgIG9mZnNldDogMFxuICB9XG5cbiAgV2F5cG9pbnQub2Zmc2V0QWxpYXNlcyA9IHtcbiAgICAnYm90dG9tLWluLXZpZXcnOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuaW5uZXJIZWlnaHQoKSAtIHRoaXMuYWRhcHRlci5vdXRlckhlaWdodCgpXG4gICAgfSxcbiAgICAncmlnaHQtaW4tdmlldyc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5pbm5lcldpZHRoKCkgLSB0aGlzLmFkYXB0ZXIub3V0ZXJXaWR0aCgpXG4gICAgfVxuICB9XG5cbiAgd2luZG93LldheXBvaW50ID0gV2F5cG9pbnRcbn0oKSlcbjsoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIGZ1bmN0aW9uIHJlcXVlc3RBbmltYXRpb25GcmFtZVNoaW0oY2FsbGJhY2spIHtcbiAgICB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKVxuICB9XG5cbiAgdmFyIGtleUNvdW50ZXIgPSAwXG4gIHZhciBjb250ZXh0cyA9IHt9XG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxuICB2YXIgb2xkV2luZG93TG9hZCA9IHdpbmRvdy5vbmxvYWRcblxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvY29udGV4dCAqL1xuICBmdW5jdGlvbiBDb250ZXh0KGVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5BZGFwdGVyID0gV2F5cG9pbnQuQWRhcHRlclxuICAgIHRoaXMuYWRhcHRlciA9IG5ldyB0aGlzLkFkYXB0ZXIoZWxlbWVudClcbiAgICB0aGlzLmtleSA9ICd3YXlwb2ludC1jb250ZXh0LScgKyBrZXlDb3VudGVyXG4gICAgdGhpcy5kaWRTY3JvbGwgPSBmYWxzZVxuICAgIHRoaXMuZGlkUmVzaXplID0gZmFsc2VcbiAgICB0aGlzLm9sZFNjcm9sbCA9IHtcbiAgICAgIHg6IHRoaXMuYWRhcHRlci5zY3JvbGxMZWZ0KCksXG4gICAgICB5OiB0aGlzLmFkYXB0ZXIuc2Nyb2xsVG9wKClcbiAgICB9XG4gICAgdGhpcy53YXlwb2ludHMgPSB7XG4gICAgICB2ZXJ0aWNhbDoge30sXG4gICAgICBob3Jpem9udGFsOiB7fVxuICAgIH1cblxuICAgIGVsZW1lbnQud2F5cG9pbnRDb250ZXh0S2V5ID0gdGhpcy5rZXlcbiAgICBjb250ZXh0c1tlbGVtZW50LndheXBvaW50Q29udGV4dEtleV0gPSB0aGlzXG4gICAga2V5Q291bnRlciArPSAxXG4gICAgaWYgKCFXYXlwb2ludC53aW5kb3dDb250ZXh0KSB7XG4gICAgICBXYXlwb2ludC53aW5kb3dDb250ZXh0ID0gdHJ1ZVxuICAgICAgV2F5cG9pbnQud2luZG93Q29udGV4dCA9IG5ldyBDb250ZXh0KHdpbmRvdylcbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZVRocm90dGxlZFNjcm9sbEhhbmRsZXIoKVxuICAgIHRoaXMuY3JlYXRlVGhyb3R0bGVkUmVzaXplSGFuZGxlcigpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XG4gICAgdmFyIGF4aXMgPSB3YXlwb2ludC5vcHRpb25zLmhvcml6b250YWwgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnXG4gICAgdGhpcy53YXlwb2ludHNbYXhpc11bd2F5cG9pbnQua2V5XSA9IHdheXBvaW50XG4gICAgdGhpcy5yZWZyZXNoKClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuY2hlY2tFbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBob3Jpem9udGFsRW1wdHkgPSB0aGlzLkFkYXB0ZXIuaXNFbXB0eU9iamVjdCh0aGlzLndheXBvaW50cy5ob3Jpem9udGFsKVxuICAgIHZhciB2ZXJ0aWNhbEVtcHR5ID0gdGhpcy5BZGFwdGVyLmlzRW1wdHlPYmplY3QodGhpcy53YXlwb2ludHMudmVydGljYWwpXG4gICAgdmFyIGlzV2luZG93ID0gdGhpcy5lbGVtZW50ID09IHRoaXMuZWxlbWVudC53aW5kb3dcbiAgICBpZiAoaG9yaXpvbnRhbEVtcHR5ICYmIHZlcnRpY2FsRW1wdHkgJiYgIWlzV2luZG93KSB7XG4gICAgICB0aGlzLmFkYXB0ZXIub2ZmKCcud2F5cG9pbnRzJylcbiAgICAgIGRlbGV0ZSBjb250ZXh0c1t0aGlzLmtleV1cbiAgICB9XG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucHJvdG90eXBlLmNyZWF0ZVRocm90dGxlZFJlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcblxuICAgIGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLmhhbmRsZVJlc2l6ZSgpXG4gICAgICBzZWxmLmRpZFJlc2l6ZSA9IGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5hZGFwdGVyLm9uKCdyZXNpemUud2F5cG9pbnRzJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXNlbGYuZGlkUmVzaXplKSB7XG4gICAgICAgIHNlbGYuZGlkUmVzaXplID0gdHJ1ZVxuICAgICAgICBXYXlwb2ludC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzaXplSGFuZGxlcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5jcmVhdGVUaHJvdHRsZWRTY3JvbGxIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgZnVuY3Rpb24gc2Nyb2xsSGFuZGxlcigpIHtcbiAgICAgIHNlbGYuaGFuZGxlU2Nyb2xsKClcbiAgICAgIHNlbGYuZGlkU2Nyb2xsID0gZmFsc2VcbiAgICB9XG5cbiAgICB0aGlzLmFkYXB0ZXIub24oJ3Njcm9sbC53YXlwb2ludHMnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghc2VsZi5kaWRTY3JvbGwgfHwgV2F5cG9pbnQuaXNUb3VjaCkge1xuICAgICAgICBzZWxmLmRpZFNjcm9sbCA9IHRydWVcbiAgICAgICAgV2F5cG9pbnQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNjcm9sbEhhbmRsZXIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaGFuZGxlUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gICAgV2F5cG9pbnQuQ29udGV4dC5yZWZyZXNoQWxsKClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaGFuZGxlU2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRyaWdnZXJlZEdyb3VwcyA9IHt9XG4gICAgdmFyIGF4ZXMgPSB7XG4gICAgICBob3Jpem9udGFsOiB7XG4gICAgICAgIG5ld1Njcm9sbDogdGhpcy5hZGFwdGVyLnNjcm9sbExlZnQoKSxcbiAgICAgICAgb2xkU2Nyb2xsOiB0aGlzLm9sZFNjcm9sbC54LFxuICAgICAgICBmb3J3YXJkOiAncmlnaHQnLFxuICAgICAgICBiYWNrd2FyZDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgdmVydGljYWw6IHtcbiAgICAgICAgbmV3U2Nyb2xsOiB0aGlzLmFkYXB0ZXIuc2Nyb2xsVG9wKCksXG4gICAgICAgIG9sZFNjcm9sbDogdGhpcy5vbGRTY3JvbGwueSxcbiAgICAgICAgZm9yd2FyZDogJ2Rvd24nLFxuICAgICAgICBiYWNrd2FyZDogJ3VwJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGF4aXNLZXkgaW4gYXhlcykge1xuICAgICAgdmFyIGF4aXMgPSBheGVzW2F4aXNLZXldXG4gICAgICB2YXIgaXNGb3J3YXJkID0gYXhpcy5uZXdTY3JvbGwgPiBheGlzLm9sZFNjcm9sbFxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzRm9yd2FyZCA/IGF4aXMuZm9yd2FyZCA6IGF4aXMuYmFja3dhcmRcblxuICAgICAgZm9yICh2YXIgd2F5cG9pbnRLZXkgaW4gdGhpcy53YXlwb2ludHNbYXhpc0tleV0pIHtcbiAgICAgICAgdmFyIHdheXBvaW50ID0gdGhpcy53YXlwb2ludHNbYXhpc0tleV1bd2F5cG9pbnRLZXldXG4gICAgICAgIGlmICh3YXlwb2ludC50cmlnZ2VyUG9pbnQgPT09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIHZhciB3YXNCZWZvcmVUcmlnZ2VyUG9pbnQgPSBheGlzLm9sZFNjcm9sbCA8IHdheXBvaW50LnRyaWdnZXJQb2ludFxuICAgICAgICB2YXIgbm93QWZ0ZXJUcmlnZ2VyUG9pbnQgPSBheGlzLm5ld1Njcm9sbCA+PSB3YXlwb2ludC50cmlnZ2VyUG9pbnRcbiAgICAgICAgdmFyIGNyb3NzZWRGb3J3YXJkID0gd2FzQmVmb3JlVHJpZ2dlclBvaW50ICYmIG5vd0FmdGVyVHJpZ2dlclBvaW50XG4gICAgICAgIHZhciBjcm9zc2VkQmFja3dhcmQgPSAhd2FzQmVmb3JlVHJpZ2dlclBvaW50ICYmICFub3dBZnRlclRyaWdnZXJQb2ludFxuICAgICAgICBpZiAoY3Jvc3NlZEZvcndhcmQgfHwgY3Jvc3NlZEJhY2t3YXJkKSB7XG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGRpcmVjdGlvbilcbiAgICAgICAgICB0cmlnZ2VyZWRHcm91cHNbd2F5cG9pbnQuZ3JvdXAuaWRdID0gd2F5cG9pbnQuZ3JvdXBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGdyb3VwS2V5IGluIHRyaWdnZXJlZEdyb3Vwcykge1xuICAgICAgdHJpZ2dlcmVkR3JvdXBzW2dyb3VwS2V5XS5mbHVzaFRyaWdnZXJzKClcbiAgICB9XG5cbiAgICB0aGlzLm9sZFNjcm9sbCA9IHtcbiAgICAgIHg6IGF4ZXMuaG9yaXpvbnRhbC5uZXdTY3JvbGwsXG4gICAgICB5OiBheGVzLnZlcnRpY2FsLm5ld1Njcm9sbFxuICAgIH1cbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaW5uZXJIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuICAgIGlmICh0aGlzLmVsZW1lbnQgPT0gdGhpcy5lbGVtZW50LndpbmRvdykge1xuICAgICAgcmV0dXJuIFdheXBvaW50LnZpZXdwb3J0SGVpZ2h0KClcbiAgICB9XG4gICAgLyplc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuaW5uZXJIZWlnaHQoKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbih3YXlwb2ludCkge1xuICAgIGRlbGV0ZSB0aGlzLndheXBvaW50c1t3YXlwb2ludC5heGlzXVt3YXlwb2ludC5rZXldXG4gICAgdGhpcy5jaGVja0VtcHR5KClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaW5uZXJXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIC8qZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG4gICAgaWYgKHRoaXMuZWxlbWVudCA9PSB0aGlzLmVsZW1lbnQud2luZG93KSB7XG4gICAgICByZXR1cm4gV2F5cG9pbnQudmlld3BvcnRXaWR0aCgpXG4gICAgfVxuICAgIC8qZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmlubmVyV2lkdGgoKVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9jb250ZXh0LWRlc3Ryb3kgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbGxXYXlwb2ludHMgPSBbXVxuICAgIGZvciAodmFyIGF4aXMgaW4gdGhpcy53YXlwb2ludHMpIHtcbiAgICAgIGZvciAodmFyIHdheXBvaW50S2V5IGluIHRoaXMud2F5cG9pbnRzW2F4aXNdKSB7XG4gICAgICAgIGFsbFdheXBvaW50cy5wdXNoKHRoaXMud2F5cG9pbnRzW2F4aXNdW3dheXBvaW50S2V5XSlcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IGFsbFdheXBvaW50cy5sZW5ndGg7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgYWxsV2F5cG9pbnRzW2ldLmRlc3Ryb3koKVxuICAgIH1cbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvY29udGV4dC1yZWZyZXNoICovXG4gIENvbnRleHQucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuICAgIHZhciBpc1dpbmRvdyA9IHRoaXMuZWxlbWVudCA9PSB0aGlzLmVsZW1lbnQud2luZG93XG4gICAgLyplc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuICAgIHZhciBjb250ZXh0T2Zmc2V0ID0gaXNXaW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLmFkYXB0ZXIub2Zmc2V0KClcbiAgICB2YXIgdHJpZ2dlcmVkR3JvdXBzID0ge31cbiAgICB2YXIgYXhlc1xuXG4gICAgdGhpcy5oYW5kbGVTY3JvbGwoKVxuICAgIGF4ZXMgPSB7XG4gICAgICBob3Jpem9udGFsOiB7XG4gICAgICAgIGNvbnRleHRPZmZzZXQ6IGlzV2luZG93ID8gMCA6IGNvbnRleHRPZmZzZXQubGVmdCxcbiAgICAgICAgY29udGV4dFNjcm9sbDogaXNXaW5kb3cgPyAwIDogdGhpcy5vbGRTY3JvbGwueCxcbiAgICAgICAgY29udGV4dERpbWVuc2lvbjogdGhpcy5pbm5lcldpZHRoKCksXG4gICAgICAgIG9sZFNjcm9sbDogdGhpcy5vbGRTY3JvbGwueCxcbiAgICAgICAgZm9yd2FyZDogJ3JpZ2h0JyxcbiAgICAgICAgYmFja3dhcmQ6ICdsZWZ0JyxcbiAgICAgICAgb2Zmc2V0UHJvcDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgdmVydGljYWw6IHtcbiAgICAgICAgY29udGV4dE9mZnNldDogaXNXaW5kb3cgPyAwIDogY29udGV4dE9mZnNldC50b3AsXG4gICAgICAgIGNvbnRleHRTY3JvbGw6IGlzV2luZG93ID8gMCA6IHRoaXMub2xkU2Nyb2xsLnksXG4gICAgICAgIGNvbnRleHREaW1lbnNpb246IHRoaXMuaW5uZXJIZWlnaHQoKSxcbiAgICAgICAgb2xkU2Nyb2xsOiB0aGlzLm9sZFNjcm9sbC55LFxuICAgICAgICBmb3J3YXJkOiAnZG93bicsXG4gICAgICAgIGJhY2t3YXJkOiAndXAnLFxuICAgICAgICBvZmZzZXRQcm9wOiAndG9wJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGF4aXNLZXkgaW4gYXhlcykge1xuICAgICAgdmFyIGF4aXMgPSBheGVzW2F4aXNLZXldXG4gICAgICBmb3IgKHZhciB3YXlwb2ludEtleSBpbiB0aGlzLndheXBvaW50c1theGlzS2V5XSkge1xuICAgICAgICB2YXIgd2F5cG9pbnQgPSB0aGlzLndheXBvaW50c1theGlzS2V5XVt3YXlwb2ludEtleV1cbiAgICAgICAgdmFyIGFkanVzdG1lbnQgPSB3YXlwb2ludC5vcHRpb25zLm9mZnNldFxuICAgICAgICB2YXIgb2xkVHJpZ2dlclBvaW50ID0gd2F5cG9pbnQudHJpZ2dlclBvaW50XG4gICAgICAgIHZhciBlbGVtZW50T2Zmc2V0ID0gMFxuICAgICAgICB2YXIgZnJlc2hXYXlwb2ludCA9IG9sZFRyaWdnZXJQb2ludCA9PSBudWxsXG4gICAgICAgIHZhciBjb250ZXh0TW9kaWZpZXIsIHdhc0JlZm9yZVNjcm9sbCwgbm93QWZ0ZXJTY3JvbGxcbiAgICAgICAgdmFyIHRyaWdnZXJlZEJhY2t3YXJkLCB0cmlnZ2VyZWRGb3J3YXJkXG5cbiAgICAgICAgaWYgKHdheXBvaW50LmVsZW1lbnQgIT09IHdheXBvaW50LmVsZW1lbnQud2luZG93KSB7XG4gICAgICAgICAgZWxlbWVudE9mZnNldCA9IHdheXBvaW50LmFkYXB0ZXIub2Zmc2V0KClbYXhpcy5vZmZzZXRQcm9wXVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhZGp1c3RtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgYWRqdXN0bWVudCA9IGFkanVzdG1lbnQuYXBwbHkod2F5cG9pbnQpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFkanVzdG1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYWRqdXN0bWVudCA9IHBhcnNlRmxvYXQoYWRqdXN0bWVudClcbiAgICAgICAgICBpZiAod2F5cG9pbnQub3B0aW9ucy5vZmZzZXQuaW5kZXhPZignJScpID4gLSAxKSB7XG4gICAgICAgICAgICBhZGp1c3RtZW50ID0gTWF0aC5jZWlsKGF4aXMuY29udGV4dERpbWVuc2lvbiAqIGFkanVzdG1lbnQgLyAxMDApXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dE1vZGlmaWVyID0gYXhpcy5jb250ZXh0U2Nyb2xsIC0gYXhpcy5jb250ZXh0T2Zmc2V0XG4gICAgICAgIHdheXBvaW50LnRyaWdnZXJQb2ludCA9IE1hdGguZmxvb3IoZWxlbWVudE9mZnNldCArIGNvbnRleHRNb2RpZmllciAtIGFkanVzdG1lbnQpXG4gICAgICAgIHdhc0JlZm9yZVNjcm9sbCA9IG9sZFRyaWdnZXJQb2ludCA8IGF4aXMub2xkU2Nyb2xsXG4gICAgICAgIG5vd0FmdGVyU2Nyb2xsID0gd2F5cG9pbnQudHJpZ2dlclBvaW50ID49IGF4aXMub2xkU2Nyb2xsXG4gICAgICAgIHRyaWdnZXJlZEJhY2t3YXJkID0gd2FzQmVmb3JlU2Nyb2xsICYmIG5vd0FmdGVyU2Nyb2xsXG4gICAgICAgIHRyaWdnZXJlZEZvcndhcmQgPSAhd2FzQmVmb3JlU2Nyb2xsICYmICFub3dBZnRlclNjcm9sbFxuXG4gICAgICAgIGlmICghZnJlc2hXYXlwb2ludCAmJiB0cmlnZ2VyZWRCYWNrd2FyZCkge1xuICAgICAgICAgIHdheXBvaW50LnF1ZXVlVHJpZ2dlcihheGlzLmJhY2t3YXJkKVxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFmcmVzaFdheXBvaW50ICYmIHRyaWdnZXJlZEZvcndhcmQpIHtcbiAgICAgICAgICB3YXlwb2ludC5xdWV1ZVRyaWdnZXIoYXhpcy5mb3J3YXJkKVxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZyZXNoV2F5cG9pbnQgJiYgYXhpcy5vbGRTY3JvbGwgPj0gd2F5cG9pbnQudHJpZ2dlclBvaW50KSB7XG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGF4aXMuZm9yd2FyZClcbiAgICAgICAgICB0cmlnZ2VyZWRHcm91cHNbd2F5cG9pbnQuZ3JvdXAuaWRdID0gd2F5cG9pbnQuZ3JvdXBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIFdheXBvaW50LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGdyb3VwS2V5IGluIHRyaWdnZXJlZEdyb3Vwcykge1xuICAgICAgICB0cmlnZ2VyZWRHcm91cHNbZ3JvdXBLZXldLmZsdXNoVHJpZ2dlcnMoKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LmZpbmRPckNyZWF0ZUJ5RWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gQ29udGV4dC5maW5kQnlFbGVtZW50KGVsZW1lbnQpIHx8IG5ldyBDb250ZXh0KGVsZW1lbnQpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucmVmcmVzaEFsbCA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGNvbnRleHRJZCBpbiBjb250ZXh0cykge1xuICAgICAgY29udGV4dHNbY29udGV4dElkXS5yZWZyZXNoKClcbiAgICB9XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2NvbnRleHQtZmluZC1ieS1lbGVtZW50ICovXG4gIENvbnRleHQuZmluZEJ5RWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gY29udGV4dHNbZWxlbWVudC53YXlwb2ludENvbnRleHRLZXldXG4gIH1cblxuICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKG9sZFdpbmRvd0xvYWQpIHtcbiAgICAgIG9sZFdpbmRvd0xvYWQoKVxuICAgIH1cbiAgICBDb250ZXh0LnJlZnJlc2hBbGwoKVxuICB9XG5cblxuICBXYXlwb2ludC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciByZXF1ZXN0Rm4gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWVTaGltXG4gICAgcmVxdWVzdEZuLmNhbGwod2luZG93LCBjYWxsYmFjaylcbiAgfVxuICBXYXlwb2ludC5Db250ZXh0ID0gQ29udGV4dFxufSgpKVxuOyhmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgZnVuY3Rpb24gYnlUcmlnZ2VyUG9pbnQoYSwgYikge1xuICAgIHJldHVybiBhLnRyaWdnZXJQb2ludCAtIGIudHJpZ2dlclBvaW50XG4gIH1cblxuICBmdW5jdGlvbiBieVJldmVyc2VUcmlnZ2VyUG9pbnQoYSwgYikge1xuICAgIHJldHVybiBiLnRyaWdnZXJQb2ludCAtIGEudHJpZ2dlclBvaW50XG4gIH1cblxuICB2YXIgZ3JvdXBzID0ge1xuICAgIHZlcnRpY2FsOiB7fSxcbiAgICBob3Jpem9udGFsOiB7fVxuICB9XG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxuXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9ncm91cCAqL1xuICBmdW5jdGlvbiBHcm91cChvcHRpb25zKSB7XG4gICAgdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lXG4gICAgdGhpcy5heGlzID0gb3B0aW9ucy5heGlzXG4gICAgdGhpcy5pZCA9IHRoaXMubmFtZSArICctJyArIHRoaXMuYXhpc1xuICAgIHRoaXMud2F5cG9pbnRzID0gW11cbiAgICB0aGlzLmNsZWFyVHJpZ2dlclF1ZXVlcygpXG4gICAgZ3JvdXBzW3RoaXMuYXhpc11bdGhpcy5uYW1lXSA9IHRoaXNcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgR3JvdXAucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XG4gICAgdGhpcy53YXlwb2ludHMucHVzaCh3YXlwb2ludClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgR3JvdXAucHJvdG90eXBlLmNsZWFyVHJpZ2dlclF1ZXVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudHJpZ2dlclF1ZXVlcyA9IHtcbiAgICAgIHVwOiBbXSxcbiAgICAgIGRvd246IFtdLFxuICAgICAgbGVmdDogW10sXG4gICAgICByaWdodDogW11cbiAgICB9XG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLnByb3RvdHlwZS5mbHVzaFRyaWdnZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgZGlyZWN0aW9uIGluIHRoaXMudHJpZ2dlclF1ZXVlcykge1xuICAgICAgdmFyIHdheXBvaW50cyA9IHRoaXMudHJpZ2dlclF1ZXVlc1tkaXJlY3Rpb25dXG4gICAgICB2YXIgcmV2ZXJzZSA9IGRpcmVjdGlvbiA9PT0gJ3VwJyB8fCBkaXJlY3Rpb24gPT09ICdsZWZ0J1xuICAgICAgd2F5cG9pbnRzLnNvcnQocmV2ZXJzZSA/IGJ5UmV2ZXJzZVRyaWdnZXJQb2ludCA6IGJ5VHJpZ2dlclBvaW50KVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IHdheXBvaW50cy5sZW5ndGg7IGkgPCBlbmQ7IGkgKz0gMSkge1xuICAgICAgICB2YXIgd2F5cG9pbnQgPSB3YXlwb2ludHNbaV1cbiAgICAgICAgaWYgKHdheXBvaW50Lm9wdGlvbnMuY29udGludW91cyB8fCBpID09PSB3YXlwb2ludHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHdheXBvaW50LnRyaWdnZXIoW2RpcmVjdGlvbl0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jbGVhclRyaWdnZXJRdWV1ZXMoKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XG4gICAgdGhpcy53YXlwb2ludHMuc29ydChieVRyaWdnZXJQb2ludClcbiAgICB2YXIgaW5kZXggPSBXYXlwb2ludC5BZGFwdGVyLmluQXJyYXkod2F5cG9pbnQsIHRoaXMud2F5cG9pbnRzKVxuICAgIHZhciBpc0xhc3QgPSBpbmRleCA9PT0gdGhpcy53YXlwb2ludHMubGVuZ3RoIC0gMVxuICAgIHJldHVybiBpc0xhc3QgPyBudWxsIDogdGhpcy53YXlwb2ludHNbaW5kZXggKyAxXVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5wcm90b3R5cGUucHJldmlvdXMgPSBmdW5jdGlvbih3YXlwb2ludCkge1xuICAgIHRoaXMud2F5cG9pbnRzLnNvcnQoYnlUcmlnZ2VyUG9pbnQpXG4gICAgdmFyIGluZGV4ID0gV2F5cG9pbnQuQWRhcHRlci5pbkFycmF5KHdheXBvaW50LCB0aGlzLndheXBvaW50cylcbiAgICByZXR1cm4gaW5kZXggPyB0aGlzLndheXBvaW50c1tpbmRleCAtIDFdIDogbnVsbFxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5wcm90b3R5cGUucXVldWVUcmlnZ2VyID0gZnVuY3Rpb24od2F5cG9pbnQsIGRpcmVjdGlvbikge1xuICAgIHRoaXMudHJpZ2dlclF1ZXVlc1tkaXJlY3Rpb25dLnB1c2god2F5cG9pbnQpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbih3YXlwb2ludCkge1xuICAgIHZhciBpbmRleCA9IFdheXBvaW50LkFkYXB0ZXIuaW5BcnJheSh3YXlwb2ludCwgdGhpcy53YXlwb2ludHMpXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMud2F5cG9pbnRzLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2ZpcnN0ICovXG4gIEdyb3VwLnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLndheXBvaW50c1swXVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9sYXN0ICovXG4gIEdyb3VwLnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMud2F5cG9pbnRzW3RoaXMud2F5cG9pbnRzLmxlbmd0aCAtIDFdXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLmZpbmRPckNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ3JvdXBzW29wdGlvbnMuYXhpc11bb3B0aW9ucy5uYW1lXSB8fCBuZXcgR3JvdXAob3B0aW9ucylcbiAgfVxuXG4gIFdheXBvaW50Lkdyb3VwID0gR3JvdXBcbn0oKSlcbjsoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxuXG4gIGZ1bmN0aW9uIGlzV2luZG93KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudCA9PT0gZWxlbWVudC53aW5kb3dcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7XG4gICAgaWYgKGlzV2luZG93KGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudFxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudC5kZWZhdWx0Vmlld1xuICB9XG5cbiAgZnVuY3Rpb24gTm9GcmFtZXdvcmtBZGFwdGVyKGVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5oYW5kbGVycyA9IHt9XG4gIH1cblxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLmlubmVySGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlzV2luID0gaXNXaW5kb3codGhpcy5lbGVtZW50KVxuICAgIHJldHVybiBpc1dpbiA/IHRoaXMuZWxlbWVudC5pbm5lckhlaWdodCA6IHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHRcbiAgfVxuXG4gIE5vRnJhbWV3b3JrQWRhcHRlci5wcm90b3R5cGUuaW5uZXJXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpc1dpbiA9IGlzV2luZG93KHRoaXMuZWxlbWVudClcbiAgICByZXR1cm4gaXNXaW4gPyB0aGlzLmVsZW1lbnQuaW5uZXJXaWR0aCA6IHRoaXMuZWxlbWVudC5jbGllbnRXaWR0aFxuICB9XG5cbiAgTm9GcmFtZXdvcmtBZGFwdGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbihldmVudCwgaGFuZGxlcikge1xuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycyhlbGVtZW50LCBsaXN0ZW5lcnMsIGhhbmRsZXIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBlbmQgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXVxuICAgICAgICBpZiAoIWhhbmRsZXIgfHwgaGFuZGxlciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIobGlzdGVuZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZXZlbnRQYXJ0cyA9IGV2ZW50LnNwbGl0KCcuJylcbiAgICB2YXIgZXZlbnRUeXBlID0gZXZlbnRQYXJ0c1swXVxuICAgIHZhciBuYW1lc3BhY2UgPSBldmVudFBhcnRzWzFdXG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRcblxuICAgIGlmIChuYW1lc3BhY2UgJiYgdGhpcy5oYW5kbGVyc1tuYW1lc3BhY2VdICYmIGV2ZW50VHlwZSkge1xuICAgICAgcmVtb3ZlTGlzdGVuZXJzKGVsZW1lbnQsIHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXVtldmVudFR5cGVdLCBoYW5kbGVyKVxuICAgICAgdGhpcy5oYW5kbGVyc1tuYW1lc3BhY2VdW2V2ZW50VHlwZV0gPSBbXVxuICAgIH1cbiAgICBlbHNlIGlmIChldmVudFR5cGUpIHtcbiAgICAgIGZvciAodmFyIG5zIGluIHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXJzKGVsZW1lbnQsIHRoaXMuaGFuZGxlcnNbbnNdW2V2ZW50VHlwZV0gfHwgW10sIGhhbmRsZXIpXG4gICAgICAgIHRoaXMuaGFuZGxlcnNbbnNdW2V2ZW50VHlwZV0gPSBbXVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChuYW1lc3BhY2UgJiYgdGhpcy5oYW5kbGVyc1tuYW1lc3BhY2VdKSB7XG4gICAgICBmb3IgKHZhciB0eXBlIGluIHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXSkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcnMoZWxlbWVudCwgdGhpcy5oYW5kbGVyc1tuYW1lc3BhY2VdW3R5cGVdLCBoYW5kbGVyKVxuICAgICAgfVxuICAgICAgdGhpcy5oYW5kbGVyc1tuYW1lc3BhY2VdID0ge31cbiAgICB9XG4gIH1cblxuICAvKiBBZGFwdGVkIGZyb20galF1ZXJ5IDEueCBvZmZzZXQoKSAqL1xuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgdmFyIGRvY3VtZW50RWxlbWVudCA9IHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuICAgIHZhciB3aW4gPSBnZXRXaW5kb3codGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQpXG4gICAgdmFyIHJlY3QgPSB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgIHJlY3QgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY3VtZW50RWxlbWVudC5jbGllbnRUb3AsXG4gICAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2N1bWVudEVsZW1lbnQuY2xpZW50TGVmdFxuICAgIH1cbiAgfVxuXG4gIE5vRnJhbWV3b3JrQWRhcHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbihldmVudCwgaGFuZGxlcikge1xuICAgIHZhciBldmVudFBhcnRzID0gZXZlbnQuc3BsaXQoJy4nKVxuICAgIHZhciBldmVudFR5cGUgPSBldmVudFBhcnRzWzBdXG4gICAgdmFyIG5hbWVzcGFjZSA9IGV2ZW50UGFydHNbMV0gfHwgJ19fZGVmYXVsdCdcbiAgICB2YXIgbnNIYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXSA9IHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXSB8fCB7fVxuICAgIHZhciBuc1R5cGVMaXN0ID0gbnNIYW5kbGVyc1tldmVudFR5cGVdID0gbnNIYW5kbGVyc1tldmVudFR5cGVdIHx8IFtdXG5cbiAgICBuc1R5cGVMaXN0LnB1c2goaGFuZGxlcilcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIpXG4gIH1cblxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLm91dGVySGVpZ2h0ID0gZnVuY3Rpb24oaW5jbHVkZU1hcmdpbikge1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLmlubmVySGVpZ2h0KClcbiAgICB2YXIgY29tcHV0ZWRTdHlsZVxuXG4gICAgaWYgKGluY2x1ZGVNYXJnaW4gJiYgIWlzV2luZG93KHRoaXMuZWxlbWVudCkpIHtcbiAgICAgIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsZW1lbnQpXG4gICAgICBoZWlnaHQgKz0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3AsIDEwKVxuICAgICAgaGVpZ2h0ICs9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUubWFyZ2luQm90dG9tLCAxMClcbiAgICB9XG5cbiAgICByZXR1cm4gaGVpZ2h0XG4gIH1cblxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLm91dGVyV2lkdGggPSBmdW5jdGlvbihpbmNsdWRlTWFyZ2luKSB7XG4gICAgdmFyIHdpZHRoID0gdGhpcy5pbm5lcldpZHRoKClcbiAgICB2YXIgY29tcHV0ZWRTdHlsZVxuXG4gICAgaWYgKGluY2x1ZGVNYXJnaW4gJiYgIWlzV2luZG93KHRoaXMuZWxlbWVudCkpIHtcbiAgICAgIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsZW1lbnQpXG4gICAgICB3aWR0aCArPSBwYXJzZUludChjb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQsIDEwKVxuICAgICAgd2lkdGggKz0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5tYXJnaW5SaWdodCwgMTApXG4gICAgfVxuXG4gICAgcmV0dXJuIHdpZHRoXG4gIH1cblxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLnNjcm9sbExlZnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgd2luID0gZ2V0V2luZG93KHRoaXMuZWxlbWVudClcbiAgICByZXR1cm4gd2luID8gd2luLnBhZ2VYT2Zmc2V0IDogdGhpcy5lbGVtZW50LnNjcm9sbExlZnRcbiAgfVxuXG4gIE5vRnJhbWV3b3JrQWRhcHRlci5wcm90b3R5cGUuc2Nyb2xsVG9wID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHdpbiA9IGdldFdpbmRvdyh0aGlzLmVsZW1lbnQpXG4gICAgcmV0dXJuIHdpbiA/IHdpbi5wYWdlWU9mZnNldCA6IHRoaXMuZWxlbWVudC5zY3JvbGxUb3BcbiAgfVxuXG4gIE5vRnJhbWV3b3JrQWRhcHRlci5leHRlbmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcblxuICAgIGZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBvYmpba2V5XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDEsIGVuZCA9IGFyZ3MubGVuZ3RoOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIG1lcmdlKGFyZ3NbMF0sIGFyZ3NbaV0pXG4gICAgfVxuICAgIHJldHVybiBhcmdzWzBdXG4gIH1cblxuICBOb0ZyYW1ld29ya0FkYXB0ZXIuaW5BcnJheSA9IGZ1bmN0aW9uKGVsZW1lbnQsIGFycmF5LCBpKSB7XG4gICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAtMSA6IGFycmF5LmluZGV4T2YoZWxlbWVudCwgaSlcbiAgfVxuXG4gIE5vRnJhbWV3b3JrQWRhcHRlci5pc0VtcHR5T2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiAwICovXG4gICAgZm9yICh2YXIgbmFtZSBpbiBvYmopIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgV2F5cG9pbnQuYWRhcHRlcnMucHVzaCh7XG4gICAgbmFtZTogJ25vZnJhbWV3b3JrJyxcbiAgICBBZGFwdGVyOiBOb0ZyYW1ld29ya0FkYXB0ZXJcbiAgfSlcbiAgV2F5cG9pbnQuQWRhcHRlciA9IE5vRnJhbWV3b3JrQWRhcHRlclxufSgpKVxuOyIsIi8qIVxuV2F5cG9pbnRzIFN0aWNreSBFbGVtZW50IFNob3J0Y3V0IC0gNC4wLjFcbkNvcHlyaWdodCDCqSAyMDExLTIwMTYgQ2FsZWIgVHJvdWdodG9uXG5MaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5odHRwczovL2dpdGh1Yi5jb20vaW1ha2V3ZWJ0aGluZ3Mvd2F5cG9pbnRzL2Jsb2IvbWFzdGVyL2xpY2Vuc2VzLnR4dFxuKi9cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgdmFyICQgPSB3aW5kb3cualF1ZXJ5XG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxuXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL3Nob3J0Y3V0cy9zdGlja3ktZWxlbWVudHMgKi9cbiAgZnVuY3Rpb24gU3RpY2t5KG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgV2F5cG9pbnQuZGVmYXVsdHMsIFN0aWNreS5kZWZhdWx0cywgb3B0aW9ucylcbiAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLm9wdGlvbnMuZWxlbWVudFxuICAgIHRoaXMuJGVsZW1lbnQgPSAkKHRoaXMuZWxlbWVudClcbiAgICB0aGlzLmNyZWF0ZVdyYXBwZXIoKVxuICAgIHRoaXMuY3JlYXRlV2F5cG9pbnQoKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBTdGlja3kucHJvdG90eXBlLmNyZWF0ZVdheXBvaW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9yaWdpbmFsSGFuZGxlciA9IHRoaXMub3B0aW9ucy5oYW5kbGVyXG5cbiAgICB0aGlzLndheXBvaW50ID0gbmV3IFdheXBvaW50KCQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMud3JhcHBlcixcbiAgICAgIGhhbmRsZXI6ICQucHJveHkoZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBzaG91bGRCZVN0dWNrID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbi5pbmRleE9mKGRpcmVjdGlvbikgPiAtMVxuICAgICAgICB2YXIgd3JhcHBlckhlaWdodCA9IHNob3VsZEJlU3R1Y2sgPyB0aGlzLiRlbGVtZW50Lm91dGVySGVpZ2h0KHRydWUpIDogJydcblxuICAgICAgICB0aGlzLiR3cmFwcGVyLmhlaWdodCh3cmFwcGVySGVpZ2h0KVxuICAgICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMub3B0aW9ucy5zdHVja0NsYXNzLCBzaG91bGRCZVN0dWNrKVxuXG4gICAgICAgIGlmIChvcmlnaW5hbEhhbmRsZXIpIHtcbiAgICAgICAgICBvcmlnaW5hbEhhbmRsZXIuY2FsbCh0aGlzLCBkaXJlY3Rpb24pXG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpXG4gICAgfSkpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIFN0aWNreS5wcm90b3R5cGUuY3JlYXRlV3JhcHBlciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMud3JhcHBlcikge1xuICAgICAgdGhpcy4kZWxlbWVudC53cmFwKHRoaXMub3B0aW9ucy53cmFwcGVyKVxuICAgIH1cbiAgICB0aGlzLiR3cmFwcGVyID0gdGhpcy4kZWxlbWVudC5wYXJlbnQoKVxuICAgIHRoaXMud3JhcHBlciA9IHRoaXMuJHdyYXBwZXJbMF1cbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICBTdGlja3kucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy4kZWxlbWVudC5wYXJlbnQoKVswXSA9PT0gdGhpcy53cmFwcGVyKSB7XG4gICAgICB0aGlzLndheXBvaW50LmRlc3Ryb3koKVxuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuc3R1Y2tDbGFzcylcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMud3JhcHBlcikge1xuICAgICAgICB0aGlzLiRlbGVtZW50LnVud3JhcCgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgU3RpY2t5LmRlZmF1bHRzID0ge1xuICAgIHdyYXBwZXI6ICc8ZGl2IGNsYXNzPVwic3RpY2t5LXdyYXBwZXJcIiAvPicsXG4gICAgc3R1Y2tDbGFzczogJ3N0dWNrJyxcbiAgICBkaXJlY3Rpb246ICdkb3duIHJpZ2h0J1xuICB9XG5cbiAgV2F5cG9pbnQuU3RpY2t5ID0gU3RpY2t5XG59KCkpXG47IiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjYuMlxuLyoqXG5AbGljZW5zZSBTdGlja3kta2l0IHYxLjEuMyB8IFdURlBMIHwgTGVhZiBDb3Jjb3JhbiAyMDE1IHwgaHR0cDovL2xlYWZvLm5ldFxuKi9cblxuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciAkLCB3aW47XG5cbiAgJCA9IHRoaXMualF1ZXJ5IHx8IHdpbmRvdy5qUXVlcnk7XG5cbiAgd2luID0gJCh3aW5kb3cpO1xuXG4gICQuZm4uc3RpY2tfaW5fcGFyZW50ID0gZnVuY3Rpb24ob3B0cykge1xuICAgIHZhciBkb2MsIGVsbSwgZW5hYmxlX2JvdHRvbWluZywgaW5uZXJfc2Nyb2xsaW5nLCBtYW51YWxfc3BhY2VyLCBvZmZzZXRfdG9wLCBvdXRlcl93aWR0aCwgcGFyZW50X3NlbGVjdG9yLCByZWNhbGNfZXZlcnksIHN0aWNreV9jbGFzcywgX2ZuLCBfaSwgX2xlbjtcblxuICAgIGlmIChvcHRzID09IG51bGwpIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgc3RpY2t5X2NsYXNzID0gb3B0cy5zdGlja3lfY2xhc3MsIGlubmVyX3Njcm9sbGluZyA9IG9wdHMuaW5uZXJfc2Nyb2xsaW5nLCByZWNhbGNfZXZlcnkgPSBvcHRzLnJlY2FsY19ldmVyeSwgcGFyZW50X3NlbGVjdG9yID0gb3B0cy5wYXJlbnQsIG9mZnNldF90b3AgPSBvcHRzLm9mZnNldF90b3AsIG1hbnVhbF9zcGFjZXIgPSBvcHRzLnNwYWNlciwgZW5hYmxlX2JvdHRvbWluZyA9IG9wdHMuYm90dG9taW5nO1xuICAgIGlmIChvZmZzZXRfdG9wID09IG51bGwpIHtcbiAgICAgIG9mZnNldF90b3AgPSAwO1xuICAgIH1cbiAgICBpZiAocGFyZW50X3NlbGVjdG9yID09IG51bGwpIHtcbiAgICAgIHBhcmVudF9zZWxlY3RvciA9IHZvaWQgMDtcbiAgICB9XG4gICAgaWYgKGlubmVyX3Njcm9sbGluZyA9PSBudWxsKSB7XG4gICAgICBpbm5lcl9zY3JvbGxpbmcgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoc3RpY2t5X2NsYXNzID09IG51bGwpIHtcbiAgICAgIHN0aWNreV9jbGFzcyA9IFwiaXNfc3R1Y2tcIjtcbiAgICB9XG4gICAgZG9jID0gJChkb2N1bWVudCk7XG4gICAgaWYgKGVuYWJsZV9ib3R0b21pbmcgPT0gbnVsbCkge1xuICAgICAgZW5hYmxlX2JvdHRvbWluZyA9IHRydWU7XG4gICAgfVxuICAgIG91dGVyX3dpZHRoID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgIHZhciBjb21wdXRlZCwgdywgX2VsO1xuXG4gICAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgX2VsID0gZWxbMF07XG4gICAgICAgIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxbMF0pO1xuICAgICAgICB3ID0gcGFyc2VGbG9hdChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKFwid2lkdGhcIikpICsgcGFyc2VGbG9hdChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKFwibWFyZ2luLWxlZnRcIikpICsgcGFyc2VGbG9hdChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKFwibWFyZ2luLXJpZ2h0XCIpKTtcbiAgICAgICAgaWYgKGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoXCJib3gtc2l6aW5nXCIpICE9PSBcImJvcmRlci1ib3hcIikge1xuICAgICAgICAgIHcgKz0gcGFyc2VGbG9hdChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKFwiYm9yZGVyLWxlZnQtd2lkdGhcIikpICsgcGFyc2VGbG9hdChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKFwiYm9yZGVyLXJpZ2h0LXdpZHRoXCIpKSArIHBhcnNlRmxvYXQoY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZShcInBhZGRpbmctbGVmdFwiKSkgKyBwYXJzZUZsb2F0KGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLXJpZ2h0XCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlbC5vdXRlcldpZHRoKHRydWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgX2ZuID0gZnVuY3Rpb24oZWxtLCBwYWRkaW5nX2JvdHRvbSwgcGFyZW50X3RvcCwgcGFyZW50X2hlaWdodCwgdG9wLCBoZWlnaHQsIGVsX2Zsb2F0LCBkZXRhY2hlZCkge1xuICAgICAgdmFyIGJvdHRvbWVkLCBkZXRhY2gsIGZpeGVkLCBsYXN0X3BvcywgbGFzdF9zY3JvbGxfaGVpZ2h0LCBvZmZzZXQsIHBhcmVudCwgcmVjYWxjLCByZWNhbGNfYW5kX3RpY2ssIHJlY2FsY19jb3VudGVyLCBzcGFjZXIsIHRpY2s7XG5cbiAgICAgIGlmIChlbG0uZGF0YShcInN0aWNreV9raXRcIikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWxtLmRhdGEoXCJzdGlja3lfa2l0XCIsIHRydWUpO1xuICAgICAgbGFzdF9zY3JvbGxfaGVpZ2h0ID0gZG9jLmhlaWdodCgpO1xuICAgICAgcGFyZW50ID0gZWxtLnBhcmVudCgpO1xuICAgICAgaWYgKHBhcmVudF9zZWxlY3RvciAhPSBudWxsKSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5jbG9zZXN0KHBhcmVudF9zZWxlY3Rvcik7XG4gICAgICB9XG4gICAgICBpZiAoIXBhcmVudC5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gZmluZCBzdGljayBwYXJlbnRcIjtcbiAgICAgIH1cbiAgICAgIGZpeGVkID0gZmFsc2U7XG4gICAgICBib3R0b21lZCA9IGZhbHNlO1xuICAgICAgc3BhY2VyID0gbWFudWFsX3NwYWNlciAhPSBudWxsID8gbWFudWFsX3NwYWNlciAmJiBlbG0uY2xvc2VzdChtYW51YWxfc3BhY2VyKSA6ICQoXCI8ZGl2IC8+XCIpO1xuICAgICAgaWYgKHNwYWNlcikge1xuICAgICAgICBzcGFjZXIuY3NzKCdwb3NpdGlvbicsIGVsbS5jc3MoJ3Bvc2l0aW9uJykpO1xuICAgICAgfVxuICAgICAgcmVjYWxjID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBib3JkZXJfdG9wLCBwYWRkaW5nX3RvcCwgcmVzdG9yZTtcblxuICAgICAgICBpZiAoZGV0YWNoZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGFzdF9zY3JvbGxfaGVpZ2h0ID0gZG9jLmhlaWdodCgpO1xuICAgICAgICBib3JkZXJfdG9wID0gcGFyc2VJbnQocGFyZW50LmNzcyhcImJvcmRlci10b3Atd2lkdGhcIiksIDEwKTtcbiAgICAgICAgcGFkZGluZ190b3AgPSBwYXJzZUludChwYXJlbnQuY3NzKFwicGFkZGluZy10b3BcIiksIDEwKTtcbiAgICAgICAgcGFkZGluZ19ib3R0b20gPSBwYXJzZUludChwYXJlbnQuY3NzKFwicGFkZGluZy1ib3R0b21cIiksIDEwKTtcbiAgICAgICAgcGFyZW50X3RvcCA9IHBhcmVudC5vZmZzZXQoKS50b3AgKyBib3JkZXJfdG9wICsgcGFkZGluZ190b3A7XG4gICAgICAgIHBhcmVudF9oZWlnaHQgPSBwYXJlbnQuaGVpZ2h0KCk7XG4gICAgICAgIGlmIChmaXhlZCkge1xuICAgICAgICAgIGZpeGVkID0gZmFsc2U7XG4gICAgICAgICAgYm90dG9tZWQgPSBmYWxzZTtcbiAgICAgICAgICBpZiAobWFudWFsX3NwYWNlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBlbG0uaW5zZXJ0QWZ0ZXIoc3BhY2VyKTtcbiAgICAgICAgICAgIHNwYWNlci5kZXRhY2goKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxtLmNzcyh7XG4gICAgICAgICAgICBwb3NpdGlvbjogXCJcIixcbiAgICAgICAgICAgIHRvcDogXCJcIixcbiAgICAgICAgICAgIHdpZHRoOiBcIlwiLFxuICAgICAgICAgICAgYm90dG9tOiBcIlwiXG4gICAgICAgICAgfSkucmVtb3ZlQ2xhc3Moc3RpY2t5X2NsYXNzKTtcbiAgICAgICAgICByZXN0b3JlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0b3AgPSBlbG0ub2Zmc2V0KCkudG9wIC0gKHBhcnNlSW50KGVsbS5jc3MoXCJtYXJnaW4tdG9wXCIpLCAxMCkgfHwgMCkgLSBvZmZzZXRfdG9wO1xuICAgICAgICBoZWlnaHQgPSBlbG0ub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgIGVsX2Zsb2F0ID0gZWxtLmNzcyhcImZsb2F0XCIpO1xuICAgICAgICBpZiAoc3BhY2VyKSB7XG4gICAgICAgICAgc3BhY2VyLmNzcyh7XG4gICAgICAgICAgICB3aWR0aDogb3V0ZXJfd2lkdGgoZWxtKSxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgZGlzcGxheTogZWxtLmNzcyhcImRpc3BsYXlcIiksXG4gICAgICAgICAgICBcInZlcnRpY2FsLWFsaWduXCI6IGVsbS5jc3MoXCJ2ZXJ0aWNhbC1hbGlnblwiKSxcbiAgICAgICAgICAgIFwiZmxvYXRcIjogZWxfZmxvYXRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdG9yZSkge1xuICAgICAgICAgIHJldHVybiB0aWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZWNhbGMoKTtcbiAgICAgIGlmIChoZWlnaHQgPT09IHBhcmVudF9oZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGFzdF9wb3MgPSB2b2lkIDA7XG4gICAgICBvZmZzZXQgPSBvZmZzZXRfdG9wO1xuICAgICAgcmVjYWxjX2NvdW50ZXIgPSByZWNhbGNfZXZlcnk7XG4gICAgICB0aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjc3MsIGRlbHRhLCByZWNhbGNlZCwgc2Nyb2xsLCB3aWxsX2JvdHRvbSwgd2luX2hlaWdodDtcblxuICAgICAgICBpZiAoZGV0YWNoZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVjYWxjZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHJlY2FsY19jb3VudGVyICE9IG51bGwpIHtcbiAgICAgICAgICByZWNhbGNfY291bnRlciAtPSAxO1xuICAgICAgICAgIGlmIChyZWNhbGNfY291bnRlciA8PSAwKSB7XG4gICAgICAgICAgICByZWNhbGNfY291bnRlciA9IHJlY2FsY19ldmVyeTtcbiAgICAgICAgICAgIHJlY2FsYygpO1xuICAgICAgICAgICAgcmVjYWxjZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlY2FsY2VkICYmIGRvYy5oZWlnaHQoKSAhPT0gbGFzdF9zY3JvbGxfaGVpZ2h0KSB7XG4gICAgICAgICAgcmVjYWxjKCk7XG4gICAgICAgICAgcmVjYWxjZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHNjcm9sbCA9IHdpbi5zY3JvbGxUb3AoKTtcbiAgICAgICAgaWYgKGxhc3RfcG9zICE9IG51bGwpIHtcbiAgICAgICAgICBkZWx0YSA9IHNjcm9sbCAtIGxhc3RfcG9zO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RfcG9zID0gc2Nyb2xsO1xuICAgICAgICBpZiAoZml4ZWQpIHtcbiAgICAgICAgICBpZiAoZW5hYmxlX2JvdHRvbWluZykge1xuICAgICAgICAgICAgd2lsbF9ib3R0b20gPSBzY3JvbGwgKyBoZWlnaHQgKyBvZmZzZXQgPiBwYXJlbnRfaGVpZ2h0ICsgcGFyZW50X3RvcDtcbiAgICAgICAgICAgIGlmIChib3R0b21lZCAmJiAhd2lsbF9ib3R0b20pIHtcbiAgICAgICAgICAgICAgYm90dG9tZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgZWxtLmNzcyh7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgICAgICAgICAgICAgICBib3R0b206IFwiXCIsXG4gICAgICAgICAgICAgICAgdG9wOiBvZmZzZXRcbiAgICAgICAgICAgICAgfSkudHJpZ2dlcihcInN0aWNreV9raXQ6dW5ib3R0b21cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzY3JvbGwgPCB0b3ApIHtcbiAgICAgICAgICAgIGZpeGVkID0gZmFsc2U7XG4gICAgICAgICAgICBvZmZzZXQgPSBvZmZzZXRfdG9wO1xuICAgICAgICAgICAgaWYgKG1hbnVhbF9zcGFjZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICBpZiAoZWxfZmxvYXQgPT09IFwibGVmdFwiIHx8IGVsX2Zsb2F0ID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgICAgICAgICBlbG0uaW5zZXJ0QWZ0ZXIoc3BhY2VyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzcGFjZXIuZGV0YWNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjc3MgPSB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcIlwiLFxuICAgICAgICAgICAgICB3aWR0aDogXCJcIixcbiAgICAgICAgICAgICAgdG9wOiBcIlwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZWxtLmNzcyhjc3MpLnJlbW92ZUNsYXNzKHN0aWNreV9jbGFzcykudHJpZ2dlcihcInN0aWNreV9raXQ6dW5zdGlja1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlubmVyX3Njcm9sbGluZykge1xuICAgICAgICAgICAgd2luX2hlaWdodCA9IHdpbi5oZWlnaHQoKTtcbiAgICAgICAgICAgIGlmIChoZWlnaHQgKyBvZmZzZXRfdG9wID4gd2luX2hlaWdodCkge1xuICAgICAgICAgICAgICBpZiAoIWJvdHRvbWVkKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0IC09IGRlbHRhO1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IE1hdGgubWF4KHdpbl9oZWlnaHQgLSBoZWlnaHQsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gTWF0aC5taW4ob2Zmc2V0X3RvcCwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoZml4ZWQpIHtcbiAgICAgICAgICAgICAgICAgIGVsbS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IG9mZnNldCArIFwicHhcIlxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzY3JvbGwgPiB0b3ApIHtcbiAgICAgICAgICAgIGZpeGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNzcyA9IHtcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgICAgICAgICAgICAgdG9wOiBvZmZzZXRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjc3Mud2lkdGggPSBlbG0uY3NzKFwiYm94LXNpemluZ1wiKSA9PT0gXCJib3JkZXItYm94XCIgPyBlbG0ub3V0ZXJXaWR0aCgpICsgXCJweFwiIDogZWxtLndpZHRoKCkgKyBcInB4XCI7XG4gICAgICAgICAgICBlbG0uY3NzKGNzcykuYWRkQ2xhc3Moc3RpY2t5X2NsYXNzKTtcbiAgICAgICAgICAgIGlmIChtYW51YWxfc3BhY2VyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgZWxtLmFmdGVyKHNwYWNlcik7XG4gICAgICAgICAgICAgIGlmIChlbF9mbG9hdCA9PT0gXCJsZWZ0XCIgfHwgZWxfZmxvYXQgPT09IFwicmlnaHRcIikge1xuICAgICAgICAgICAgICAgIHNwYWNlci5hcHBlbmQoZWxtKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxtLnRyaWdnZXIoXCJzdGlja3lfa2l0OnN0aWNrXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZml4ZWQgJiYgZW5hYmxlX2JvdHRvbWluZykge1xuICAgICAgICAgIGlmICh3aWxsX2JvdHRvbSA9PSBudWxsKSB7XG4gICAgICAgICAgICB3aWxsX2JvdHRvbSA9IHNjcm9sbCArIGhlaWdodCArIG9mZnNldCA+IHBhcmVudF9oZWlnaHQgKyBwYXJlbnRfdG9wO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWJvdHRvbWVkICYmIHdpbGxfYm90dG9tKSB7XG4gICAgICAgICAgICBib3R0b21lZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAocGFyZW50LmNzcyhcInBvc2l0aW9uXCIpID09PSBcInN0YXRpY1wiKSB7XG4gICAgICAgICAgICAgIHBhcmVudC5jc3Moe1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWxtLmNzcyh7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICAgIGJvdHRvbTogcGFkZGluZ19ib3R0b20sXG4gICAgICAgICAgICAgIHRvcDogXCJhdXRvXCJcbiAgICAgICAgICAgIH0pLnRyaWdnZXIoXCJzdGlja3lfa2l0OmJvdHRvbVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZWNhbGNfYW5kX3RpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVjYWxjKCk7XG4gICAgICAgIHJldHVybiB0aWNrKCk7XG4gICAgICB9O1xuICAgICAgZGV0YWNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGRldGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgd2luLm9mZihcInRvdWNobW92ZVwiLCB0aWNrKTtcbiAgICAgICAgd2luLm9mZihcInNjcm9sbFwiLCB0aWNrKTtcbiAgICAgICAgd2luLm9mZihcInJlc2l6ZVwiLCByZWNhbGNfYW5kX3RpY2spO1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLm9mZihcInN0aWNreV9raXQ6cmVjYWxjXCIsIHJlY2FsY19hbmRfdGljayk7XG4gICAgICAgIGVsbS5vZmYoXCJzdGlja3lfa2l0OmRldGFjaFwiLCBkZXRhY2gpO1xuICAgICAgICBlbG0ucmVtb3ZlRGF0YShcInN0aWNreV9raXRcIik7XG4gICAgICAgIGVsbS5jc3Moe1xuICAgICAgICAgIHBvc2l0aW9uOiBcIlwiLFxuICAgICAgICAgIGJvdHRvbTogXCJcIixcbiAgICAgICAgICB0b3A6IFwiXCIsXG4gICAgICAgICAgd2lkdGg6IFwiXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudC5wb3NpdGlvbihcInBvc2l0aW9uXCIsIFwiXCIpO1xuICAgICAgICBpZiAoZml4ZWQpIHtcbiAgICAgICAgICBpZiAobWFudWFsX3NwYWNlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoZWxfZmxvYXQgPT09IFwibGVmdFwiIHx8IGVsX2Zsb2F0ID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgICAgICAgZWxtLmluc2VydEFmdGVyKHNwYWNlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcGFjZXIucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlbG0ucmVtb3ZlQ2xhc3Moc3RpY2t5X2NsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHdpbi5vbihcInRvdWNobW92ZVwiLCB0aWNrKTtcbiAgICAgIHdpbi5vbihcInNjcm9sbFwiLCB0aWNrKTtcbiAgICAgIHdpbi5vbihcInJlc2l6ZVwiLCByZWNhbGNfYW5kX3RpY2spO1xuICAgICAgJChkb2N1bWVudC5ib2R5KS5vbihcInN0aWNreV9raXQ6cmVjYWxjXCIsIHJlY2FsY19hbmRfdGljayk7XG4gICAgICBlbG0ub24oXCJzdGlja3lfa2l0OmRldGFjaFwiLCBkZXRhY2gpO1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQodGljaywgMCk7XG4gICAgfTtcbiAgICBmb3IgKF9pID0gMCwgX2xlbiA9IHRoaXMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgIGVsbSA9IHRoaXNbX2ldO1xuICAgICAgX2ZuKCQoZWxtKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKCBmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0ICogU3dpdGNoZXMgc3ViLW1lbnUgcG9zaXRpb25zIGZyb20gbGVmdCB0byByaWdodFxuXHQgKiBkZXBlbmRpbmcgb24gd2hldGhlciBvciBub3QgdGhlIG1lbnUgd2lsbCBvdmVyZmxvd1xuXHQgKiB0aGUgdmlld3BvcnRcblx0ICovXG5cblx0Ly8gTWFrZSBzdXJlIENDSGVhbHRoIGV4aXN0cy5cblxuXHRpZiAoIHR5cGVvZiB3aW5kb3cuQ0NIZWFsdGggPT09ICd1bmRlZmluZWQnICkge1xuXHRcdHdpbmRvdy5DQ0hlYWx0aCA9IHt9O1xuXHR9XG5cblx0d2luZG93LkNDSGVhbHRoLnZpc2libGVNZW51ID0gKCBmdW5jdGlvbiAoKSB7XG5cdFx0LyoqXG5cdFx0ICogQ29tcGFyZXMgbWVudSdzIHJpZ2h0IHBvc2l0aW9uIGluIHZpZXdwb3J0IGFnYWluc3Qgdmlld3BvcnQgd2lkdGhcblx0XHQgKiBAcGFyYW0gbWVudSBDdXJyZW50IG1lbnUgdG8gdGVzdFxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdHZhciBpc0luVmlld3BvcnQgPSBmdW5jdGlvbiggbWVudSApIHtcblx0XHRcdHZhciB2aWV3cG9ydFdpZHRoID0gd2luZG93Lm91dGVyV2lkdGgsXG5cdFx0XHRcdG1lbnVQb3NpdGlvbiA9IG1lbnUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG5cdFx0XHRcdGVsZW1lbnRSaWdodFBvcyA9IG1lbnVQb3NpdGlvbi5yaWdodDtcblxuXHRcdFx0cmV0dXJuIGVsZW1lbnRSaWdodFBvcyA8IHZpZXdwb3J0V2lkdGg7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEFwcGxpZXMgbGVmdC1tZW51IGNsYXNzIHRvIG1lbnUgaWYgdmlld3BvcnQgaXMgdG9vIHNtYWxsIHRvIGRpc3BsYXkuXG5cdFx0ICogQHBhcmFtIG1lbnUgQ3VycmVudCBtZW51XG5cdFx0ICovXG5cdFx0dmFyIHN3aXRjaE1lbnVQb3NpdGlvbiA9IGZ1bmN0aW9uKCBtZW51ICkge1xuXHRcdFx0aWYgKCAhIG1lbnUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bWVudS5jbGFzc0xpc3QuYWRkKCAnbGVmdC1tZW51JyApO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBQb3NpdGlvbnMgbWVudSB0byB0aGUgbGVmdCBpbiBjYXNlIGl0IHdpbGwgYmUgaGlkZGVuIGJ5IHZpZXdwb3J0LlxuXHRcdCAqIEBwYXJhbSBldmVudCBUcmlnZ2VyZWQgZXZlbnRcblx0XHQgKi9cblx0XHR2YXIgcG9zaXRpb25NZW51ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGV2ZW50LnRhcmdldCxcblx0XHRcdFx0c3ViTWVudSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCAnLnN1Yi1tZW51JyApO1xuXG5cdFx0XHRpZiAoICEgc3ViTWVudSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzSW5WaWV3cG9ydCggc3ViTWVudSApICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHN3aXRjaE1lbnVQb3NpdGlvbiggc3ViTWVudSApO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZW1vdmVzIGxlZnQgbWVudSBjbGFzcyBvbmNlIG1vdXNlIGhhcyBsZWZ0IHRoZSBtZW51LlxuXHRcdCAqIEBwYXJhbSBldmVudCBUcmlnZ2VyZWQgZXZlbnRcblx0XHQgKi9cblx0XHR2YXIgcmVzdG9yZU1lbnUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRzdWJNZW51ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoICcuc3ViLW1lbnUnICk7XG5cblx0XHRcdC8vIEFkZCBhIHRpbWVvdXQgdG8gY29tcGVuc2F0ZSBmb3IgdHJhbnNpdGlvbi5cblx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzdWJNZW51LmNsYXNzTGlzdC5yZW1vdmUoICdsZWZ0LW1lbnUnICk7XG5cdFx0XHR9LCA1MDAgKTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQXR0YWNoIGV2ZW50c1xuXHRcdCAqL1xuXHRcdHZhciBpbml0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIG1haW5OYXZpZ2F0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggJy5wcmltYXJ5LW5hdmlnYXRpb24nICksXG5cdFx0XHRcdGxpc3RJdGVtcyA9IG1haW5OYXZpZ2F0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoICcuc3ViLW1lbnUgbGkgLnN1Yi1tZW51JyApO1xuXG5cdFx0XHRpZiAoICEgbGlzdEl0ZW1zICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxpc3RJdGVtcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFyIHBhcmVudExpID0gbGlzdEl0ZW1zWyBpIF0ucGFyZW50RWxlbWVudDtcblxuXHRcdFx0XHRwYXJlbnRMaS5hZGRFdmVudExpc3RlbmVyKCAnbW91c2VlbnRlcicsIHBvc2l0aW9uTWVudSApO1xuXHRcdFx0XHRwYXJlbnRMaS5hZGRFdmVudExpc3RlbmVyKCAnbW91c2VsZWF2ZScsIHJlc3RvcmVNZW51ICk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRpbml0OiBpbml0XG5cdFx0fTtcblx0fSApKCk7XG5cblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCB3aW5kb3cuQ0NIZWFsdGgudmlzaWJsZU1lbnUuaW5pdCApO1xufSApKCk7XG4iLCIvKmpzaGludCBlc25leHQ6IHRydWUgKi9cbmltcG9ydCB0aHJvdHRsZSBmcm9tICdsb2Rhc2gudGhyb3R0bGUnO1xucmVxdWlyZSggJ3dheXBvaW50cy9saWIvbm9mcmFtZXdvcmsud2F5cG9pbnRzLmpzJyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5yZXF1aXJlKCAnd2F5cG9pbnRzL2xpYi9zaG9ydGN1dHMvc3RpY2t5LmpzJyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5pbXBvcnQgJ3N0aWNreS1raXQvZGlzdC9zdGlja3kta2l0JztcblxuLyoqXG4gKiBMb2FkcyBmb3IgYW55IGFkIHdpdGggYSAubGF6eS1sb2FkIGNsYXNzIGFuZCBvbmx5IGxvYWQgdGhlblxuICogd2hlbiB0aGV5J3JlIGNsb3NlIHRvIGNvbWUgaW50byB2aWV3XG4gKi9cbmV4cG9ydCBjb25zdCBsYXp5TG9hZEFkcyA9ICgpID0+IHtcblx0Y29uc3QgYWRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy5hZC5sYXp5LWxvYWQnICk7XG5cblx0YWRzLmZvckVhY2goIGFkID0+IHtcblx0XHRjb25zdCBlbFJlY3QgPSBhZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRsZXQgbG9hZGVkID0gZmFsc2U7XG5cblx0XHQvLyBWYWx1ZSBvZiBzY3JvbGxZIC0gYWRQb3NpdGlvbiBhdCB3aGljaCB0aGUgYWQgaXMgYWJvdXQgdG8gY29tZSBpbnRvIHZpZXcuXG5cdFx0Y29uc3QgYWRBbG1vc3RWaXNpYmxlU2Nyb2xsVmFsdWUgPSA0MDA7XG5cblx0XHRjb25zdCBsaXN0ZW5lciA9ICgpID0+IHtcblx0XHRcdGNvbnN0IHdpbmRvd1RvcCAgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcblx0XHRcdGxldCBkZWx0YSA9IGVsUmVjdC55IC0gd2luZG93LnNjcmVlbi5oZWlnaHQgLSB3aW5kb3dUb3A7XG5cblx0XHRcdGlmICggZGVsdGEgPD0gYWRBbG1vc3RWaXNpYmxlU2Nyb2xsVmFsdWUgJiYgIWxvYWRlZCApIHtcblx0XHRcdFx0Z29vZ2xldGFnLmNtZC5wdXNoKCAoKSA9PiB7XG5cdFx0XHRcdFx0Z29vZ2xldGFnLmRpc3BsYXkoIGFkLmlkICk7XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRsb2FkZWQgPSB0cnVlO1xuXHRcdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Njcm9sbCcsIGxpc3RlbmVyICk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhyb3R0bGUoIGxpc3RlbmVyLCAxMDAgKSApO1xuXHR9ICk7XG59O1xuXG4vKipcbiAqIFVuc3RpY2tpZXMgYW4gQWRcbiAqXG4gKiBAcGFyYW0geyp9IGFkSWRcbiAqIEBwYXJhbSB7Kn0gbWlsaXNlY29uc1xuICovXG5leHBvcnQgY29uc3QgdW5zdGlja0FkID0gKCBhZElkLCBtaWxpc2Vjb25zICkgPT4ge1xuXHRzZXRUaW1lb3V0KCAoKSA9PiB7XG5cdFx0Y29uc3QgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggYWRJZCApO1xuXHRcdGVsLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcblx0fSwgbWlsaXNlY29ucyApO1xufTtcblxuLyoqXG4gKiBNYWtlcyBhbiBhZCBzdGlja3lcbiAqXG4gKiBAcGFyYW0geyp9IGFkSWRcbiAqIEBwYXJhbSB7Kn0gbWlsbGlzZWNvbmRzXG4gKi9cbmV4cG9ydCBjb25zdCBzdGlja0FkID0gKCBhZElkLCBnb29nbGVBZElkLCBtaWxsaXNlY29uZHMgPSAyMDAwLCB0cmlnZ2VyRWxlbWVudCA9ICcuY29udGVudC1hcmVhJyApID0+IHtcblx0Ly8gVGhlIHRyaWdnZXIgZWxlbWVudCBhcyBmcm9tIHdoaWNoIHdlIHdpbGwgaGlkZSB0aGUgYWQgYWZ0ZXIgeCBtaWxsaXNlY29uZHMgb3Igc2hvdyBpdCBhZ2FpbiB3aGVuIGdvaW5nIHVwXG5cdGNvbnN0IGVsVHJpZ2dlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIHRyaWdnZXJFbGVtZW50ICk7XG5cdC8vIFRoZSBhZCBlbGVtZW50IGlkIChub3QgR29vZ2xlIG9uZSlcblx0Y29uc3QgZWxBZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBhZElkICk7XG5cdC8vIHRvIGtub3cgd2hldGhlciB3YXlwb2ludCBoYXMgYmVlbiBpbml0aWFsaXplZC4gV2Ugb25seSBpbml0aWFsaXplIGl0IHdoZW4gc2Nyb2xsIGhhcyBzdGFydGVkXG5cdGxldCBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdGlmICggZWxUcmlnZ2VyICYmIGVsQWQgKSB7XG5cdFx0Ly8gV2Ugd2F0Y2ggd2hlbiB0aGUgR29vZ2xlIGFkcyByZW5kZXJcblx0XHRnb29nbGV0YWcuY21kLnB1c2goICgpID0+IHtcblx0XHRcdC8vIE9uY2Ugc2xvdCBpcyByZW5kZXJlZFxuXHRcdFx0Z29vZ2xldGFnLnB1YmFkcygpLmFkZEV2ZW50TGlzdGVuZXIoICdzbG90UmVuZGVyRW5kZWQnLCAoIGV2ZW50ICkgPT4ge1xuXHRcdFx0XHQvLyBDaGVjayBmb3IgY29ycmVjdCBpZFxuXHRcdFx0XHRpZiAoIGV2ZW50LnNsb3QuZ2V0U2xvdEVsZW1lbnRJZCgpID09PSBnb29nbGVBZElkICkge1xuXHRcdFx0XHRcdC8vIElmIHRoZSBhZCBpcyBub3QgZW1wdHksIHdlIG1ha2UgaXQgc3RpY2t5IGJ5IGluaXQgd2F5cG9pbnRcblx0XHRcdFx0XHRpZiAoICEgZXZlbnQuaXNFbXB0eSApIHtcblx0XHRcdFx0XHRcdC8vIE1ha2UgYWQgc3RpY2t5XG5cdFx0XHRcdFx0XHRuZXcgV2F5cG9pbnQuU3RpY2t5KCB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0XHRcdFx0XHRcdFx0ZWxlbWVudDogZWxBZCxcblx0XHRcdFx0XHRcdFx0b2Zmc2V0OiAwXG5cdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhyb3R0bGUoIGluaXRXYXlwb2ludCwgMTAwICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgd2F5cG9pbnQuIE9uY2Ugd2UgZ28gcGFzdCB0aGUgdHJpZ2dlciBlbGVtZW50LCB3ZSBtYWtlIHRoZSBhZCBzdGlja3lcblx0ICogaWYgZ29pbmcgZG93bndhcmRzLiBCdXQgaWYgd2UgYXJlIGdvaW5nIHVwd2FyZHMsIHdlIHNob3cgdGhlIGFkIGFnYWluLlxuXHQgKi9cblx0Y29uc3QgaW5pdFdheXBvaW50ID0gKCkgPT4ge1xuXHRcdC8vIE1ha2Ugc3VyZSB3ZSBkb24ndCBkbyBtdWx0aXBsZSBpbml0aWFsaXphdGlvbnNcblx0XHRpZiAoICEgaW5pdGlhbGl6ZWQgKSB7XG5cdFx0XHQvLyBUbyBrbm93IHdoZXRoZXIgdGhlcmUncyBhbiBhY3Rpb24gc2V0SW50ZXJ2YWwgd2FpdGluZyB0byBzdGFydFxuXHRcdFx0bGV0IHRyYW5zaXRpb24gPSBmYWxzZTtcblx0XHRcdC8vIFRpbWVvdXQgdmFyaWFibGUgdG8gY2xlYXIgYWZ0ZXJ3YXJkc1xuXHRcdFx0bGV0IHRpbWVvdXQgPSBudWxsO1xuXG5cdFx0XHQvLyBJbml0IHdheXBvaW50LCB1c2luZyB0aGUgdHJpZ2dlciBlbGVtZW50XG5cdFx0XHRuZXcgV2F5cG9pbnQoIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXHRcdFx0XHRlbGVtZW50OiBlbFRyaWdnZXIsXG5cdFx0XHRcdGhhbmRsZXI6ICggZGlyZWN0aW9uICkgPT4ge1xuXHRcdFx0XHRcdC8vIFdlIGFyZSBhcmUgZ29pbmcgdXAsIHBhc3QgdGhlIHRyaWdnZXIgZWxlbWVudCwgd2Ugc2hvdyB0aGUgYWQgYWdhaW5cblx0XHRcdFx0XHRpZiAoIGRpcmVjdGlvbiA9PT0gJ3VwJyApIHtcblx0XHRcdFx0XHRcdC8vIFNob3cgYWQgYWdhaW5cblx0XHRcdFx0XHRcdGVsQWQuY2xhc3NMaXN0LnJlbW92ZSggJ2hpZGRlbicgKTtcblxuXHRcdFx0XHRcdFx0Ly8gQ2xlYXIgdGhlIHRpbWVvdXRcblx0XHRcdFx0XHRcdGlmICggdGltZW91dCApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gV2UgcmVsZWFzZSB0aGUgbG9ja1xuXHRcdFx0XHRcdFx0XHR0cmFuc2l0aW9uID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggZGlyZWN0aW9uID09PSAnZG93bicgKSB7XG5cdFx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgZG93biwgd2UgY2hlY2sgaWYgd2UgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSB0cmFuc2l0aW9uIGFuZCB3aGV0aGVyXG5cdFx0XHRcdFx0XHQvLyB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGhpZGRlblxuXHRcdFx0XHRcdFx0aWYgKCAhIHRyYW5zaXRpb24gJiYgISBlbEFkLmNsYXNzTGlzdC5jb250YWlucyggJ2hpZGRlbicgKSApIHtcblx0XHRcdFx0XHRcdFx0dHJhbnNpdGlvbiA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0dGltZW91dCA9IHNldFRpbWVvdXQoICgpID0+IHtcblx0XHRcdFx0XHRcdFx0XHQvLyBXZSBoaWRlIHRoZSBhZCBub3csIGFmdGVyIHggbWlsbGlzZWNvbmRzXG5cdFx0XHRcdFx0XHRcdFx0ZWxBZC5jbGFzc0xpc3QuYWRkKCAnaGlkZGVuJyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2UgcmVsZWFzZSB0aGUgbG9ja1xuXHRcdFx0XHRcdFx0XHRcdHRyYW5zaXRpb24gPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fSwgbWlsbGlzZWNvbmRzICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRvZmZzZXQ6IDAsXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIE9uY2Ugd2F5cG9pbnQgaGFzIGJlZW4gaW5pdGlhbGl6ZWQsIHdlIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG5cdFx0XHRpbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Njcm9sbCcsIGluaXRXYXlwb2ludCApO1xuXHRcdH1cblx0fTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaWRlYmFyQWRzID0gKCkgPT4ge1xuXHQvL2ZpZ3VyZSBvdXQgaG93IG11Y2ggc3BhY2Ugd2UgaGF2ZSBmb3IgYWRzXG5cdGNvbnN0IG1haW5Db250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggJyNtYWluIC5lbnRyeS1jb250ZW50JyApO1xuXHRjb25zdCBhdmFsaWFibGVIZWlnaHQgPSBtYWluQ29udGVudC5vZmZzZXRIZWlnaHQ7XG5cblx0bGV0IHJlbWFpbmluZ0hlaWdodCA9IGF2YWxpYWJsZUhlaWdodDtcblx0Y29uc3QgYWRzQXZhbGlhYmxlID0gW107XG5cblx0bGV0IHNpZGViYXJBZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnLnN0aWNreS1hZCcgKTtcblxuXHRjb25zdCBhZHNOZWVkZWRIZWlnaHQgPSBbMTAwMCwgMTAwMCwgODAwLCA4MDAsIDgwMF07XG5cblx0c2lkZWJhckFkcy5mb3JFYWNoKCAoIHNpZGViYXJBZCwgaSApID0+IHtcblx0XHRyZW1haW5pbmdIZWlnaHQgLT0gYWRzTmVlZGVkSGVpZ2h0W2ldO1xuXG5cdFx0aWYgKCByZW1haW5pbmdIZWlnaHQgPiAwICkge1xuXHRcdFx0YWRzQXZhbGlhYmxlLnB1c2goIHNpZGViYXJBZCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzaWRlYmFyQWQucmVtb3ZlKCk7XG5cdFx0fVxuXHR9ICk7XG5cblx0Y29uc3QgJCA9IGpRdWVyeTtcblxuXHQvLyBLZWVwIHRoZSBzcGFjZXIgb3B0aW9uIHRvIGF2b2lkIHJlbG9hZCBvZiBhZHMgKGlmcmFtZSk6IGh0dHBzOi8vZ2l0aHViLmNvbS9sZWFmby9zdGlja3kta2l0L2lzc3Vlcy80NVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5cdCQoICcuc3RpY2t5LWFkIC5hZC1wb2xpY3ktZGVza3RvcCcgKS5zdGlja19pbl9wYXJlbnQoIHsgb2Zmc2V0X3RvcDogMjcwLCBzcGFjZXI6IGZhbHNlIH0gKTtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXHQkKCAnLnN0aWNreS1hZCA+IC5hZCcgKS5zdGlja19pbl9wYXJlbnQoIHsgb2Zmc2V0X3RvcDogMTAsIHNwYWNlcjogZmFsc2UgfSApO1xufTtcbiIsIi8qKlxuICogQWxlcnQgQmFubmVyXG4gKlxuICovXG5cbi8vIEltcG9ydCBEZXBlbmRlbmNpZXMuXG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnbG9kYXNoLmRlYm91bmNlJztcblxuLyoqXG4gKiBBbGVydCBCYW5uZXIgSlMgSGFuZGxlclxuICovXG5jb25zdCBhbGVydEJhbm5lciA9ICgpID0+IHtcblx0Ly8gQ2hlY2sgZm9yIGFsZXJ0IGJhbm5lciBlbGVtZW50cy5cblx0Y29uc3QgYWxlcnRCYW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ2FsZXJ0LWJhbm5lcicgKTtcblx0Y29uc3QgcGFnZVdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnYm9keS5oYXMtYWxlcnQtYmFubmVyICNwYWdlJyApO1xuXG5cdC8vIElmIGVsZW1lbnRzIGV4aXN0Li4uXG5cdGlmICggYWxlcnRCYW5uZXIgJiYgcGFnZVdyYXBwZXIgKSB7XG5cdFx0Ly8gU2V0IG9mZnNldCBmb3IgcGFnZSB0byBtYXRjaCBhbGVydCBiYW5uZXIgaGVpZ2h0LlxuXHRcdHBhZ2VXcmFwcGVyLnN0eWxlLnRvcCA9IGAke2FsZXJ0QmFubmVyLm9mZnNldEhlaWdodH1weGA7XG5cdFx0Ly8gV2F0Y2ggZm9yIHdpbmRvdyByZXNpemluZyBldmVyeSAyNTBtcy5cblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3Jlc2l6ZScsIGRlYm91bmNlKCAoKSA9PiB7XG5cdFx0XHQvLyBJZiByZXNpemVkLCB1cGRhdGUgdGhlIG9mZnNldC5cblx0XHRcdHBhZ2VXcmFwcGVyLnN0eWxlLnRvcCA9IGAke2FsZXJ0QmFubmVyLm9mZnNldEhlaWdodH1weGA7XG5cdFx0fSApLCAyNTAgKTtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWxlcnRCYW5uZXI7XG4iLCIvKipcbiAqIEdhbGxlcnkgU2xpZGVzaG93XG4gKlxuICogR2VuZXJhdGVzIGEgc2xpZGVzaG93IHVzaW5nIEd1dGVuYmVyZyBjdXN0b20gc2xpZGVzaG93IG1hcmt1cC5cbiAqL1xuXG4vKiBnbG9iYWwgdG5zICovXG5cbi8qIERlcGVuZGVuY2llcyAqL1xuLy8gVGlueVNsaWRlciByZWNjb21lbmRzIGltcG9ydGluZyB0bnMoKSB0aGlzIHdheSBpbiB0aGVpciBkb2N1bWVudGF0aW9uLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZ2FubGFueXVhbi90aW55LXNsaWRlciMzLWNhbGwtdG5zXG5cbi8qKlxuICogQWRkcyBjb250cm9scyBmb3Igc2xpZGVzaG93IGJsb2Nrcy5cbiAqL1xuY29uc3Qgc2xpZGVzaG93ID0gKCkgPT4ge1xuXHQvLyBHZXQgdGhlIHNsaWRlc2hvdyBibG9ja3MuXG5cdGNvbnN0IGdhbGxlcnlCbG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnLndwLWJsb2NrLWhlYWx0aGVzc2VudGlhbHMtc2xpZGVzaG93JyApO1xuXHQvLyBGb3IgZWFjaCBzbGlkZXNob3cgYmxvY2suLi5cblx0Z2FsbGVyeUJsb2Nrcy5mb3JFYWNoKCAoIHNsaWRlc2hvdyApID0+IHtcblx0XHR0bnMoIHtcblx0XHRcdGNvbnRhaW5lcjogc2xpZGVzaG93LFxuXHRcdFx0bmF2OiBmYWxzZSxcblx0XHR9ICk7XG5cdH0gKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNsaWRlc2hvdztcbiIsIi8qKlxuICogQ2xldmVsYW5kIENsaW5pY1xuICogaHR0cDovL2hlYWx0aC5jbGV2ZWxhbmRjbGluaWMub3JnXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1IDEwdXBcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBHUEx2MisgbGljZW5zZS5cbiAqL1xuXG4vKmpzaGludCBlc25leHQ6IHRydWUgKi9cbmltcG9ydCB7IGxhenlMb2FkQWRzLCBzaWRlYmFyQWRzIH0gZnJvbSAnLi9hZHMnO1xuaW1wb3J0IGFsZXJ0QmFubmVyIGZyb20gJy4vYWxlcnQtYmFubmVyJztcbmltcG9ydCBtYXJrZXRvSW5pdCBmcm9tICcuL21hcmtldG8nO1xuaW1wb3J0IHNsaWRlc2hvdyBmcm9tICcuL3NsaWRlc2hvdyc7XG5pbXBvcnQgdmlld01vcmUgZnJvbSAnLi92aWV3LW1vcmUnO1xuXG4vLyBJbml0aWFsaXplIGdsb2JhbCBDQ0hlYWx0aCBvYmplY3RcbnZhciBDQ0hlYWx0aCA9IHdpbmRvdy5DQ0hlYWx0aCB8fCB7fTtcblxuLy8gR2xvYmFsIFRpbWVyIGZvciB0aHJvdHRsaW5nXG5DQ0hlYWx0aC5yZXNpemVUaW1lciA9IG51bGw7XG5cbi8qKlxuICogQGZ1bmN0aW9uIENDSGVhbHRoLnNldENvb2tpZVxuICogQ3JlYXRlcyBhIENvb2tpZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb29raWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGNvb2tpZVxuICogQHBhcmFtIHtpbnR9IGRheXMgRXhwaXJhdGlvbiBvZiB0aGUgY29va2llc1xuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5DQ0hlYWx0aC5zZXRDb29raWUgPSBmdW5jdGlvbiggbmFtZSwgdmFsdWUsIGRheXMgKSB7XG5cdHZhciBleHBpcmVzID0gJyc7XG5cblx0aWYgKCBkYXlzICkge1xuXHRcdHZhciBkYXRlID0gbmV3IERhdGUoKTtcblxuXHRcdGRhdGUuc2V0VGltZSggZGF0ZS5nZXRUaW1lKCkgKyBkYXlzICogMjQgKiA2MCAqIDYwICogMTAwMCApO1xuXHRcdGV4cGlyZXMgPSAnOyBleHBpcmVzPScgKyBkYXRlLnRvVVRDU3RyaW5nKCk7XG5cdH1cblx0ZG9jdW1lbnQuY29va2llID0gbmFtZSArICc9JyArIHZhbHVlICsgZXhwaXJlcyArICc7IHBhdGg9Lyc7XG59O1xuXG4vKipcbiAqIEBmdW5jdGlvbiBDQ0hlYWx0aC5yZWFkQ29va2llXG4gKiBSZWFkcyBhIENvb2tpZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb29raWVcbiAqXG4gKiBAcmV0dXJucyB7Kn0gbnVsbCBpZiB0aGUgY29va2llIGRvZXNuJ3QgZXhpc3RcbiAqL1xuQ0NIZWFsdGgucmVhZENvb2tpZSA9IGZ1bmN0aW9uKCBuYW1lICkge1xuXHR2YXIgbmFtZUVRID0gbmFtZSArICc9Jyxcblx0XHRjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCggJzsnICk7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2EubGVuZ3RoOyBpKysgKSB7XG5cdFx0dmFyIGMgPSBjYVtpXTtcblxuXHRcdHdoaWxlICggYy5jaGFyQXQoIDAgKSA9PT0gJyAnICkge1xuXHRcdFx0YyA9IGMuc3Vic3RyaW5nKCAxLCBjLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdGlmICggYy5pbmRleE9mKCBuYW1lRVEgKSA9PT0gMCApIHtcblx0XHRcdHJldHVybiBjLnN1YnN0cmluZyggbmFtZUVRLmxlbmd0aCwgYy5sZW5ndGggKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIEBmdW5jdGlvbiBDQ0hlYWx0aC5yZXNpemVIYW5kbGVyXG4gKiBBIHRpbWVvdXQgdGhhdCBoYW5kbGVzIGZ1bmN0aW9uYWxpdHkgYmFzZWQgb24gdGhlIHdpbmRvdyBzaXplLlxuICogVGhyb3R0bGVkIGhlcmUgZm9yIHBlcmZvcm1hbmNlLiBXaWxsIGhhbmRsZSB0aGUgc2VhcmNoIGlucHV0XG4gKiB2aXNpYmlsaXR5IGJhc2VkIG9uIHRoZSBzY3JlZW4gd2lkdGguXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkNDSGVhbHRoLnJlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbiByZXNpemVIYW5kbGVyKCkge1xuXHQvLyBDbGVhciBpbml0aWFsIHRpbWVyXG5cdGNsZWFyVGltZW91dCggQ0NIZWFsdGgucmVzaXplVGltZXIgKTtcblxuXHQvLyBTdGFydCBuZXcgdGltZXIgd2l0aCBDQ0hlYWx0aC5zZWFyY2hJbnB1dEhhbmRsZXIgY2FsbGJhY2tcblx0Q0NIZWFsdGgucmVzaXplVGltZXIgPSBzZXRUaW1lb3V0KCBDQ0hlYWx0aC5zZWFyY2hJbnB1dEhhbmRsZXIsIDMwMCApO1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb24gQ0NIZWFsdGguc2V0dXBNb2JpbGVNZW51XG4gKiBCaW5kcyB0aGUgQ0NIZWFsdGgucHJpbWFyeU5hdmlnYXRpb24gY2FsbGJhY2tzIHRvIHRoZSBvbmNsaWNrXG4gKiBoYW5kbGVyIGZvciBib3RoIGxhcmdlVG9nZ2xlIGFuZCBzbWFsbFRvZ2dsZS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuQ0NIZWFsdGguc2V0dXBNb2JpbGVNZW51ID0gZnVuY3Rpb24oKSB7XG5cblx0Ly8gQ2FjaGUgZWxlbWVudHNcblx0dmFyIHRvZ2dsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnLnNpdGUtbWVudS10b2dnbGUnICk7XG5cblx0Ly8gRWFjaCB0b2dnbGUgYXNzaWduZWQgQ0NIZWFsdGgucHJpbWFyeU5hdmlnYXRpb24gY2xpY2sgaGFuZGxlclxuXHR0b2dnbGVzLmZvckVhY2goXG5cdFx0ZnVuY3Rpb24oIHRvZ2dsZSApIHtcblx0XHRcdHRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCBDQ0hlYWx0aC5wcmltYXJ5TmF2aWdhdGlvbiApO1xuXHRcdH1cblx0KTtcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIENDSGVhbHRoLnByaW1hcnlOYXZpZ2F0aW9uXG4gKiBIYW5kbGVzIHRoZSBwcmltYXJ5TmF2aWdhdGlvbiB2aXNpYmlsaXR5IGJhc2VkIG9uIGl0cyBhY3RpdmUgc3RhdGUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGUgRXZlbnQgb2JqZWN0IHBhc3NlZCB2aWEgY2xpY2tcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5DQ0hlYWx0aC5wcmltYXJ5TmF2aWdhdGlvbiA9IGZ1bmN0aW9uKCBlICl7XG5cblx0Ly8gQ2FjaGUgZWxlbWVudHNcblx0dmFyIG5hdlx0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy5wcmltYXJ5LW5hdmlnYXRpb24nIClbMF07XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdib2R5JyApWzBdO1xuXG5cdC8vIFByZXZlbnQgRGVmYXVsdFxuXHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0Ly8gVHVybiBvZmYgZ2xvYmFsTWVudVxuXHRDQ0hlYWx0aC5nbG9iYWxNZW51T2ZmKCk7XG5cblx0Ly8gQ29udHJvbCBmbG93IGJhc2VkIG9uIGFjdGl2ZSBzdGF0ZSBvZiBuYXYgT1IgaWYgc2VhcmNoIGlzIG9wZW5cblx0aWYoIG5hdi5jbGFzc0xpc3QuY29udGFpbnMoICdhY3RpdmUnICkgfHwgYm9keS5jbGFzc0xpc3QuY29udGFpbnMoICduYXYtc2VhcmNoLWFjdGl2ZScgKSApIHtcblxuXHRcdC8vIFR1cm4gb2ZmIG1vYmlsZVNlYXJjaFxuXHRcdENDSGVhbHRoLm1vYmlsZVNlYXJjaE9mZigpO1xuXG5cdFx0Ly8gVHVybiBvZmYgcHJpbWFyeU5hdmlnYXRpb25cblx0XHRDQ0hlYWx0aC5wcmltYXJ5TmF2aWdhdGlvbk9mZigpO1xuXG5cdFx0Ly8gQXJpYSBjb250cm9sXG5cdFx0ZS5jdXJyZW50VGFyZ2V0LnNldEF0dHJpYnV0ZSggJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUdXJuIG9uIHByaW1hcnlOYXZpZ2F0aW9uXG5cdFx0Q0NIZWFsdGgucHJpbWFyeU5hdmlnYXRpb25PbigpO1xuXG5cdFx0Ly8gQXJpYSBjb250cm9sXG5cdFx0ZS5jdXJyZW50VGFyZ2V0LnNldEF0dHJpYnV0ZSggJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScgKTtcblx0fVxufTtcblxuLyoqXG4gKiBAZnVuY3Rpb24gQ0NIZWFsdGgucHJpbWFyeU5hdmlnYXRpb25PZmZcbiAqIFR1cm5zIHRoZSBwcmltYXJ5TmF2aWdhdGlvbiBvZmYuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkNDSGVhbHRoLnByaW1hcnlOYXZpZ2F0aW9uT2ZmID0gZnVuY3Rpb24oKSB7XG5cblx0Ly8gQ2FjaGUgZWxlbWVudHNcblx0dmFyIG5hdiAgICAgICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICcucHJpbWFyeS1uYXZpZ2F0aW9uJyApWzBdO1xuXHR2YXIgYm9keSAgICAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdib2R5JyApWzBdO1xuXHR2YXIgaHRtbCAgICAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdodG1sJyApWzBdO1xuXG5cdC8vIERPTSBNb2RpZmllcnNcblx0bmF2LmNsYXNzTGlzdC5yZW1vdmUoICdhY3RpdmUnICk7XG5cdGJvZHkuY2xhc3NMaXN0LnJlbW92ZSggJ25hdi1ncmFkaWVudC1ibHVlJyApO1xuXHRodG1sLmNsYXNzTGlzdC5yZW1vdmUoICdhY3RpdmUtbWVudScgKTtcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIENDSGVhbHRoLnByaW1hcnlOYXZpZ2F0aW9uT25cbiAqIFR1cm5zIHRoZSBwcmltYXJ5TmF2aWdhdGlvbiBvbi5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuQ0NIZWFsdGgucHJpbWFyeU5hdmlnYXRpb25PbiA9IGZ1bmN0aW9uKCkge1xuXG5cdC8vIENhY2hlIGVsZW1lbnRzXG5cdHZhciBuYXYgICAgICAgICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnLnByaW1hcnktbmF2aWdhdGlvbicgKVswXTtcblx0dmFyIGJvZHkgICAgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnYm9keScgKVswXTtcblx0dmFyIGh0bWwgICAgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnaHRtbCcgKVswXTtcblxuXHQvLyBET00gbW9kaWZpZXJzXG5cdG5hdi5jbGFzc0xpc3QuYWRkKCAnYWN0aXZlJyApO1xuXHRib2R5LmNsYXNzTGlzdC5hZGQoICduYXYtZ3JhZGllbnQtYmx1ZScgKTtcblx0Ym9keS5jbGFzc0xpc3QucmVtb3ZlKCAnbmF2LXNlYXJjaC1hY3RpdmUnICk7XG5cdGh0bWwuY2xhc3NMaXN0LmFkZCggJ2FjdGl2ZS1tZW51JyApO1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb24gQ0NIZWFsdGguZ2xvYmFsTWVudVxuICogSGFuZGxlcyB0aGUgZ2xvYmFsTWVudSB2aXNpYmlsaXR5IGJhc2VkIG9uIGl0cyBhY3RpdmUgc3RhdGUuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkNDSGVhbHRoLmdsb2JhbE1lbnUgPSBmdW5jdGlvbiggKXtcblxuXHQvLyBDYWNoZSBlbGVtZW50c1xuXHR2YXIgdG9nZ2xlICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnanMtZ2xvYmFsLW1lbnUtdG9nZ2xlJyApO1xuXHR2YXIgZ2xvYmFsTWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnbWVudS1nbG9iYWwtbWVudScgKTtcblxuXHQvLyBCaW5kIHRvZ2dsZSBjbGljayBoYW5kbGVyXG5cdHRvZ2dsZS5vbmNsaWNrID0gZnVuY3Rpb24oICkge1xuXG5cdFx0Ly8gVHVybiBvZmYgbW9iaWxlU2VhcmNoXG5cdFx0Q0NIZWFsdGgubW9iaWxlU2VhcmNoT2ZmKCk7XG5cblx0XHQvLyBUdXJuIG9mZiBwcmltYXJ5TmF2aWdhdGlvblxuXHRcdENDSGVhbHRoLnByaW1hcnlOYXZpZ2F0aW9uT2ZmKCk7XG5cblx0XHQvLyBDb250cm9sIGZsb3cgYmFzZWQgb24gYWN0aXZlIHN0YXRlXG5cdFx0aWYoIGdsb2JhbE1lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKCAnYWN0aXZlJyApICkge1xuXG5cdFx0XHRpZiAoIHRvZ2dsZS5nZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJyApID09PSAnZmFsc2UnICkge1xuXHRcdFx0XHR0b2dnbGUuc2V0QXR0cmlidXRlKCAnYXJpYS1leHBhbmRlZCcsICd0cnVlJyApO1xuXHRcdFx0XHR0b2dnbGUuaW5uZXJIVE1MID0gJ0Nsb3NlJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRvZ2dsZS5zZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyApO1xuXHRcdFx0XHR0b2dnbGUuaW5uZXJIVE1MID0gJ01lbnUnO1xuXHRcdFx0fVxuXHRcdFx0Ly8gVHVybiBvZmYgZ2xvYmFsTWVudVxuXHRcdFx0Q0NIZWFsdGguZ2xvYmFsTWVudU9mZigpO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFR1cm4gb24gZ2xvYmFsTWVudVxuXHRcdFx0Q0NIZWFsdGguZ2xvYmFsTWVudU9uKCk7XG5cdFx0fVxuXHR9O1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb24gQ0NIZWFsdGguZ2xvYmFsTWVudU9mZlxuICogVHVybnMgdGhlIGdsb2JhbE1lbnUgb2ZmLlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5DQ0hlYWx0aC5nbG9iYWxNZW51T2ZmID0gZnVuY3Rpb24oKSB7XG5cblx0Ly8gQ2FjaGUgZWxlbWVudHNcblx0dmFyIHRvZ2dsZSAgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnanMtZ2xvYmFsLW1lbnUtdG9nZ2xlJyApO1xuXHR2YXIgZ2xvYmFsTWVudSAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdtZW51LWdsb2JhbC1tZW51JyApO1xuXHR2YXIgYm9keSAgICAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdib2R5JyApWzBdO1xuXHR2YXIgaHRtbCAgICAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdodG1sJyApWzBdO1xuXG5cdC8vIERPTSBtb2RpZmllcnNcblx0Z2xvYmFsTWVudS5jbGFzc0xpc3QucmVtb3ZlKCAnYWN0aXZlJyApO1xuXHRib2R5LmNsYXNzTGlzdC5yZW1vdmUoICduYXYtZ3JhZGllbnQtcmVkJyApO1xuXHRodG1sLmNsYXNzTGlzdC5yZW1vdmUoICdhY3RpdmUtbWVudScgKTtcblx0dG9nZ2xlLnNldEF0dHJpYnV0ZSggJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnICk7XG59O1xuXG4vKipcbiAqIEBmdW5jdGlvbiBDQ0hlYWx0aC5nbG9iYWxNZW51T25cbiAqIFR1cm5zIHRoZSBnbG9iYWxNZW51IG9uLlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5DQ0hlYWx0aC5nbG9iYWxNZW51T24gPSBmdW5jdGlvbigpIHtcblxuXHQvLyBDYWNoZSBlbGVtZW50c1xuXHR2YXIgdG9nZ2xlICAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdqcy1nbG9iYWwtbWVudS10b2dnbGUnICk7XG5cdHZhciBnbG9iYWxNZW51ICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ21lbnUtZ2xvYmFsLW1lbnUnICk7XG5cdHZhciBib2R5ICAgICAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ2JvZHknIClbMF07XG5cdHZhciBodG1sICAgICAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ2h0bWwnIClbMF07XG5cblx0Ly8gRE9NIG1vZGlmaWVyc1xuXHRnbG9iYWxNZW51LmNsYXNzTGlzdC5hZGQoICdhY3RpdmUnICk7XG5cdGJvZHkuY2xhc3NMaXN0LmFkZCggJ25hdi1ncmFkaWVudC1yZWQnICk7XG5cdGJvZHkuY2xhc3NMaXN0LnJlbW92ZSggJ25hdi1ncmFkaWVudC1ibHVlJyApO1xuXHRib2R5LmNsYXNzTGlzdC5yZW1vdmUoICduYXYtc2VhcmNoLWFjdGl2ZScgKTtcblx0aHRtbC5jbGFzc0xpc3QuYWRkKCAnYWN0aXZlLW1lbnUnICk7XG5cdHRvZ2dsZS5zZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJywgJ3RydWUnICk7XG59O1xuXG4vKipcbiAqIEBmdW5jdGlvbiBDQ0hlYWx0aC5tb2JpbGVTZWFyY2hcbiAqIEhhbmRsZXMgdGhlIG1vYmlsZVNlYXJjaCBmdW5jdGlvbmFsaXR5IGJhc2VkIG9uIHNjcmVlbiBzaXplLlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5DQ0hlYWx0aC5tb2JpbGVTZWFyY2ggPSBmdW5jdGlvbiggKSB7XG5cblx0Ly8gQ2FjaGUgZWxlbWVudHNcblx0dmFyIHRvZ2dsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICcuanMtbW9iaWxlLXNlYXJjaC10b2dnbGUnICk7XG5cdHZhciBpbnB1dCAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnI3NlYXJjaGZvcm0gaW5wdXRbdHlwZT1cInRleHRcIl0nIClbMF07XG5cblx0Ly8gQmluZCB0b2dnbGUgY2xpY2sgaGFuZGxlclxuXHR0b2dnbGUuZm9yRWFjaCggKCBlbCApID0+IHtcblx0XHRlbC5vbmNsaWNrID0gZnVuY3Rpb24oIGUgKXtcblxuXHRcdFx0Ly8gQ2FjaGUgdmFyc1xuXHRcdFx0dmFyIHNjcmVlbldpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuXG5cdFx0XHQvLyBDb250cm9sIGZsb3cgYmFzZWQgb24gc2NyZWVuV2lkdGhcblx0XHRcdGlmICggc2NyZWVuV2lkdGggPD0gOTgwICkge1xuXG5cdFx0XHRcdC8vIGRlZmF1bHQgYXJpYS1oaWRkZW4gZG9lc24ndCBleGlzdFxuXHRcdFx0XHRpZiAoIGlucHV0LmdldEF0dHJpYnV0ZSggJ2FyaWEtaGlkZGVuJyApICE9ICdmYWxzZScgKSB7XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHNlYXJjaCBzdWJtaXNzaW9uXG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCggKTtcblxuXHRcdFx0XHRcdC8vIFR1cm4gb2ZmIHByaW1hcnlOYXZpZ2F0aW9uXG5cdFx0XHRcdFx0Q0NIZWFsdGgucHJpbWFyeU5hdmlnYXRpb25PZmYoKTtcblxuXHRcdFx0XHRcdC8vIFR1cm4gb2ZmIGdsb2JhbE1lbnVcblx0XHRcdFx0XHRDQ0hlYWx0aC5nbG9iYWxNZW51T2ZmKCk7XG5cblx0XHRcdFx0XHQvLyBUdXJuIG9uIG1vYmlsZVNlYXJjaFxuXHRcdFx0XHRcdENDSGVhbHRoLm1vYmlsZVNlYXJjaE9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcblxuXG59O1xuXG4vKipcbiAqIEBmdW5jdGlvbiBDQ0hlYWx0aC5tb2JpbGVTZWFyY2hPblxuICogVHVybnMgdGhlIG1vYmlsZVNlYXJjaCBvbi5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuQ0NIZWFsdGgubW9iaWxlU2VhcmNoT24gPSBmdW5jdGlvbigpIHtcblxuXHQvLyBDYWNoZSBlbGVtZW50c1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnI3NlYXJjaGZvcm0gaW5wdXRbdHlwZT1cInRleHRcIl0nIClbMF07XG5cdHZhciBib2R5ICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnYm9keScgKVswXTtcblx0dmFyIGh0bWwgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdodG1sJyApWzBdO1xuXG5cdC8vIFR1cm4gb2ZmIHByaW1hcnlOYXZpZ2F0aW9uXG5cdENDSGVhbHRoLnByaW1hcnlOYXZpZ2F0aW9uT2ZmKCk7XG5cblx0Ly8gVHVybiBvZmYgZ2xvYmFsTWVudVxuXHRDQ0hlYWx0aC5nbG9iYWxNZW51T2ZmKCk7XG5cblx0Ly8gRE9NIG1vZGlmaWVyc1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoICdhcmlhLWhpZGRlbicsICdmYWxzZScgKTtcblx0aW5wdXQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdGJvZHkuY2xhc3NMaXN0LmFkZCggJ25hdi1ncmFkaWVudC1ibHVlJyApO1xuXHRib2R5LmNsYXNzTGlzdC5hZGQoICduYXYtc2VhcmNoLWFjdGl2ZScgKTtcblx0aHRtbC5jbGFzc0xpc3QuYWRkKCAnYWN0aXZlLW1lbnUnICk7XG5cbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIENDSGVhbHRoLm1vYmlsZVNlYXJjaE9mZlxuICogVHVybnMgdGhlIG1vYmlsZVNlYXJjaCBvZmYuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkNDSGVhbHRoLm1vYmlsZVNlYXJjaE9mZiA9IGZ1bmN0aW9uKCkge1xuXG5cdC8vIENhY2hlIHZhcnNcblx0dmFyIHNjcmVlbldpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnI3NlYXJjaGZvcm0gaW5wdXRbdHlwZT1cInRleHRcIl0nIClbMF07XG5cdHZhciBib2R5ICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnYm9keScgKVswXTtcblx0dmFyIGh0bWwgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdodG1sJyApWzBdO1xuXG5cdC8vIENvbnRyb2wgZmxvdyBiYXNlZCBvbiBzY3JlZW5XaWR0aFxuXHRpZiAoIHNjcmVlbldpZHRoIDw9IDk4MCApIHtcblxuXHRcdC8vIHVwZGF0ZSBhcmlhIGNvbnRyb2xzXG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCAnYXJpYS1oaWRkZW4nLCAndHJ1ZScgKTtcblxuXHRcdC8vIG1ha2UgaW5wdXQgdmlzaWJsZVxuXHRcdGlucHV0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdH1cblxuXHQvLyBET00gTW9kaWZpZXJzXG5cdGJvZHkuY2xhc3NMaXN0LnJlbW92ZSggJ25hdi1ncmFkaWVudC1ibHVlJyApO1xuXHRib2R5LmNsYXNzTGlzdC5yZW1vdmUoICduYXYtc2VhcmNoLWFjdGl2ZScgKTtcblx0aHRtbC5jbGFzc0xpc3QuYWRkKCAnYWN0aXZlLW1lbnUnICk7XG59O1xuXG4vKipcbiAqIEBmdW5jdGlvbiBDQ0hlYWx0aC5zZWFyY2hJbnB1dEhhbmRsZXJcbiAqIEluaXRpYWxpemVzIHRoZSBkaXNwbGF5IG9mIHRoZSBtYWluIHNlYXJjaCBpbnB1dC5cbiAqIFRoaXMgc2FtZSBmdW5jdGlvbiBpcyBhbHNvIHByb3ZpZGVkIGFzIGEgaGFuZGxlciB0byB0aGUgbWFpblxuICogYm9keSBvbnJlc2l6ZSBldmVudC4gSXQgY29udHJvbHMgdmlzaWJpbGl0eSBhbmQgYXJpYSBjb250cm9sc1xuICogb24gdGhlIG1haW4gc2VhcmNoIGlucHV0IGZvciBtb2JpbGUuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkNDSGVhbHRoLnNlYXJjaElucHV0SGFuZGxlciA9IGZ1bmN0aW9uKCApIHtcblxuXHQvLyBDYWNoZSBlbGVtZW50c1xuXHR2YXIgaW5wdXQgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJyNzZWFyY2hmb3JtIGlucHV0W3R5cGU9XCJ0ZXh0XCJdJyApWzBdO1xuXHR2YXIgYm9keSAgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ2JvZHknIClbMF07XG5cblx0Ly8gZ2V0IHRoZSBzY3JlZW53aWR0aCBub3csIHRoZSB3aW5kb3cgaGFzIGJlZW4gcmUtc2l6ZWRcblx0dmFyIHNjcmVlbldpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuXG5cdGlmICggc2NyZWVuV2lkdGggPD0gOTgwICYmICFib2R5LmNsYXNzTGlzdC5jb250YWlucyggJ25hdi1zZWFyY2gtYWN0aXZlJyApICkge1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggJ2FyaWEtaGlkZGVuJywgJ3RydWUnICk7XG5cdFx0aW5wdXQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0fSBlbHNlIHtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoICdhcmlhLWhpZGRlbicsICdmYWxzZScgKTtcblx0XHRpbnB1dC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0fVxufTtcblxuLyoqXG4gKiBAZnVuY3Rpb24gQ0NIZWFsdGguc29jaWFsVHJhY2tpbmdcbiAqXG4gKiBBZGRzIHRyYWNraW5nIHRvIHNvY2lhbCBidXR0b25zLlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5DQ0hlYWx0aC5zb2NpYWxUcmFja2luZyA9IGZ1bmN0aW9uKCkge1xuXHQvLyBHZXQgdGhlIGN1cnJlbnQgdXJsXG5cdHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZixcblx0XHRwbGF0Zm9ybSA9ICcnLFxuXHRcdHRyYWNrZXIgPSAnJyxcblx0XHRlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggJy5zaGFyZS1saW5rcycgKTtcblxuXHRpZiAoIGVsZW1lbnQgIT09IG51bGwgKSB7XG5cdFx0Ly8gQXR0YWNoIGNsaWNrIGV2ZW50IG9uIHRoZSBsaW5rcy5cblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIGZ1bmN0aW9uKCBlICkge1xuXHRcdFx0Ly8gQ2hlY2sgZm9yIGEgYW5kIGJ1dHRvbiBlbGVtZW50cy5cblx0XHRcdGlmICggZS50YXJnZXQudGFnTmFtZSA9PT0gJ0EnIHx8IGUudGFyZ2V0LnRhZ05hbWUgPT09ICdCVVRUT04nICkge1xuXHRcdFx0XHRwbGF0Zm9ybSA9ICcnO1xuXG5cdFx0XHRcdGlmICggZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCAnZmFjZWJvb2snICkgKSB7XG5cdFx0XHRcdFx0cGxhdGZvcm0gPSAnZmFjZWJvb2snO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoICd0d2l0dGVyJyApICkge1xuXHRcdFx0XHRcdHBsYXRmb3JtID0gJ3R3aXR0ZXInO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoICdsaW5rZWRpbicgKSApIHtcblx0XHRcdFx0XHRwbGF0Zm9ybSA9ICdsaW5rZWRpbic7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyggJ3BpbnRlcmVzdCcgKSApIHtcblx0XHRcdFx0XHRwbGF0Zm9ybSA9ICdwaW50ZXJlc3QnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoICdlbWFpbC1zaGFyZScgKSApIHtcblx0XHRcdFx0XHRwbGF0Zm9ybSA9ICdlbWFpbCc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZW5kIGV2ZXJ5dGhpbmcgdG8gR0Egc2VydmVycy5cblx0XHRcdFx0aWYgKCBwbGF0Zm9ybS5sZW5ndGggJiYgdHlwZW9mIGdhICE9PSAndW5kZWZpbmVkJyApIHtcblx0XHRcdFx0XHQvLyBTaW5jZSB3ZSBhcmUgdXNpbmcgR1RNIHRvIHRyYWNrIGV2ZW50cywgd2UgZ2V0IHRoZSB0cmFja2VyXG5cdFx0XHRcdFx0dHJhY2tlciA9IGdhLmdldEFsbCgpWzBdLmdldCggJ25hbWUnICk7XG5cdFx0XHRcdFx0Z2EoIHRyYWNrZXIgKyAnLnNlbmQnLCAnZXZlbnQnLCAnc2hhcmUgY2xpY2snLCBwbGF0Zm9ybSwgdXJsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LCB0cnVlICk7XG5cdH1cbn07XG5cbi8vIElJRkUgaW5pdGlhbGl6ZSBzY3JpcHRzXG4oIGZ1bmN0aW9uKCApIHtcblx0Ly8gR2xvYmFsIFNjcmlwdHNcblx0Q0NIZWFsdGguZ2xvYmFsTWVudSggKTtcblx0Q0NIZWFsdGguc2V0dXBNb2JpbGVNZW51KCApO1xuXHRDQ0hlYWx0aC5tb2JpbGVTZWFyY2goICk7XG5cdENDSGVhbHRoLnNvY2lhbFRyYWNraW5nKCApO1xuXHRDQ0hlYWx0aC5zZWFyY2hJbnB1dEhhbmRsZXIoICk7XG5cdG1hcmtldG9Jbml0KCk7XG5cdHZpZXdNb3JlKCk7XG5cblx0Ly8gQmluZCByZXNpemUgaGFuZGxlciB0byBib2R5XG5cdGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnYm9keScgKVswXS5vbnJlc2l6ZSA9IENDSGVhbHRoLnJlc2l6ZUhhbmRsZXI7XG5cblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG5cdFx0bGF6eUxvYWRBZHMoKTtcblx0XHRzbGlkZXNob3coKTtcblx0XHRhbGVydEJhbm5lcigpO1xuXG5cdFx0Ly8gTWFrZSB0aGUgbGVhZGVyYm9hcmQgYWQgc3RpY2t5IG9uIHBvc3RzIG9ubHkuXG5cdFx0aWYgKCBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyggJ3NpbmdsZScgKSApIHtcblx0XHRcdHNpZGViYXJBZHMoKTtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmlld01vcmUoKSB7XG5cdGxldCBkaXNwbGF5ZWQgPSBmYWxzZTtcblx0Y29uc3QgcmVjZW50QXJ0aWNsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnLnJlbGF0ZWQtYXJ0aWNsZXMucHJlbG9hZC12aWV3LW1vcmUnICk7XG5cblx0aWYgKCAhIHJlY2VudEFydGljbGVzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHZpZXdNb3JlQnRuID0gcmVjZW50QXJ0aWNsZXMucXVlcnlTZWxlY3RvciggJ2EuYnV0dG9uJyApO1xuXG5cdHZpZXdNb3JlQnRuLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICggZSApID0+IHtcblx0XHRpZiAoICEgZGlzcGxheWVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRyZWNlbnRBcnRpY2xlcy5jbGFzc0xpc3QucmVtb3ZlKCAncHJlbG9hZC12aWV3LW1vcmUnICk7XG5cblx0XHRcdGRpc3BsYXllZCA9IHRydWU7XG5cdFx0fVxuXHR9ICk7XG5cblxufVxuIiwiXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG5cblx0aWYgKCB3aW5kb3cuQ0NIZWFsdGhNYXJrZXRvRGF0YSAmJiB3aW5kb3cuTWt0b0Zvcm1zMiApIHtcblxuXHRcdHdpbmRvdy5DQ0hlYWx0aE1hcmtldG9EYXRhLmZvckVhY2goICggZGF0YSApID0+IHtcblx0XHRcdHdpbmRvdy5Na3RvRm9ybXMyLmxvYWRGb3JtKFxuXHRcdFx0XHRkYXRhLnVybCxcblx0XHRcdFx0ZGF0YS5tdW5jaGtpbklkLFxuXHRcdFx0XHRkYXRhLmZvcm1JZCxcblx0XHRcdFx0KCBmb3JtICkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnbWFya2V0by1mb3JtLWNvbnRhaW5lci0nICsgZGF0YS5tdW5jaGtpbklkICsgJy0nICsgZGF0YS5mb3JtSWQgKTtcblx0XHRcdFx0XHRsZXQgYnV0dG9uVGV4dCA9ICcnO1xuXG5cdFx0XHRcdFx0Zm9ybS5vblN1Ym1pdCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHQvL3NhdmUgdGhlIGJ1dHRvbiB0ZXh0IGZvciBsYXRlclxuXHRcdFx0XHRcdFx0Y29uc3QgYnV0dG9uID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoICdidXR0b25bdHlwZT1zdWJtaXRdJyApO1xuXHRcdFx0XHRcdFx0aWYgKCBidXR0b24gKSB7XG5cdFx0XHRcdFx0XHRcdGJ1dHRvblRleHQgPSBidXR0b24uaW5uZXJUZXh0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdGZvcm0ub25TdWNjZXNzKCBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0dmFyIHN1Y2Nlc3NNZXNzYWdlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdqcy1zdWNjZXNzLW1lc3NhZ2UtJyArIGRhdGEubXVuY2hraW5JZCArICctJyArIGRhdGEuZm9ybUlkICk7XG5cdFx0XHRcdFx0XHRpZiAoIHN1Y2Nlc3NNZXNzYWdlRGl2ICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRcdHN1Y2Nlc3NNZXNzYWdlRGl2LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBSZXNldCBmb3JtIGVsZW1lbnRzLlxuXHRcdFx0XHRcdFx0T2JqZWN0LmtleXMoIGZvcm0uZ2V0VmFsdWVzKCkgKS5mb3JFYWNoKCAoIG5hbWUgKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZSAhPT0gJ2Zvcm1pZCcgJiYgbmFtZSAhPT0gJ211bmNoa2luSWQnICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0bGV0IGVsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvciggJ2lucHV0W25hbWU9XCInICsgbmFtZSArICdcIl0nICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtZW50ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3dpdGNoICggZWxlbWVudC50eXBlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgJ2NoZWNrYm94Jzpcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVsZW1lbnQuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjYXNlICd0ZXh0Jzpcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZWxlbWVudC52YWx1ZSA9ICcnO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgdGhlIGRlZmF1bHQgYnV0dG9uIHRleHQuXG5cdFx0XHRcdFx0XHRjb25zdCBidXR0b24gPSBjb250YWluZXIucXVlcnlTZWxlY3RvciggJ2J1dHRvblt0eXBlPXN1Ym1pdF0nICk7XG5cdFx0XHRcdFx0XHRpZiAoIGJ1dHRvbiApIHtcblx0XHRcdFx0XHRcdFx0YnV0dG9uLmlubmVyVGV4dCA9IGJ1dHRvblRleHQ7XG5cdFx0XHRcdFx0XHRcdGJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoICdkaXNhYmxlZCcgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9IC8vIEVuZCBvZiBmb3JtIGNhbGxiYWNrLlxuXHRcdFx0KTtcblxuXHRcdH0gKTsgLy8gRW5kIG9mIHdpbmRvdy5DQ0hlYWx0aE1hcmtldG9EYXRhLmZvckVhY2guXG5cdH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9